{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ombi Docs","text":"<p>Welcome to the official Ombi Documentation!</p> <p>Please note the docs are maintained by TidusJar and the Ombi-app team.  </p> <p>Getting started:</p> <ul> <li>Installation</li> <li>Updating</li> <li>Mobile Apps</li> </ul> <p>General Information:</p> <ul> <li>FAQ</li> <li>Common Errors</li> <li>Known Faults</li> </ul>"},{"location":"changing-plex-password/","title":"Changing Plex Password","text":"<p>See Changing Plex Password</p>"},{"location":"discover/","title":"Discover","text":"<p>See Discover</p>"},{"location":"donate/","title":"Donate","text":"<p>See Donate</p>"},{"location":"faq/","title":"FAQ","text":"<p>See FAQ</p>"},{"location":"faults/","title":"Faults","text":"<p>See Faults</p>"},{"location":"installation/","title":"Installation","text":"<p>See Installation</p>"},{"location":"issues/","title":"Issues","text":"<p>See Issues</p>"},{"location":"preferences/","title":"Preferences","text":"<p>See Preferences</p>"},{"location":"requests-list/","title":"Requests List","text":"<p>See Requests List</p>"},{"location":"usermanagement/","title":"User Management","text":"<p>See User Management Settings </p> <p>See also User Roles </p>"},{"location":"archive/known-issues/","title":"Old Known Issues","text":"<p>Here you'll find some notes on some older issues that used to be encountered by Ombi users, and their fixes. If the issue is/was outside of our control then a note will be added to say so.</p>"},{"location":"archive/known-issues/#email-provider-specific","title":"Email Provider Specific","text":"<p>If an issue was specific to a certain provider, it'll be noted here.</p>"},{"location":"archive/known-issues/#gmail-less-secure-apps","title":"Gmail - Less Secure Apps","text":"<p>For SMTP in the past, Gmail required you to enable \"access for less secure apps\", under your account security. https://myaccount.google.com/lesssecureapps. This setting has been almost completely retired (it's being done in stages, not all users encountered this at once). The only way moving forward is via Two Factor Authentication (2FA).</p>"},{"location":"archive/prerequisites/","title":"Prerequisites","text":"<p>You shouldn't need to read these. They're only for if you are encountering errors and want to dig deeper. All the prerequisites should be in the .zip/.tar.gz/deployed application folder.</p> <p>Windows</p> <p>Linux</p> <p>macOS</p>"},{"location":"archive/v3-specific-proxy/","title":"Ye Olde v3 Proxy","text":"<p>Note: These examples assume you are using /ombi as your Base URL. If your Base URL differs, replace all instances of /ombi with /YourBaseURL. If you're using a subdomain (ombi.example.com), replace all instances of /ombi with /, and remove the first location block.</p> <p>v4 Reverse Proxy</p>"},{"location":"archive/v3-specific-proxy/#nginx","title":"Nginx","text":"<p>To use nginx as a reverse proxy requires no extra modules, but it does require configuring. In the configuration for your nginx site (nginx.conf for the default site), you'll need to add a 'block' for catching ombi as a subpath. If you wish to use a subdomain, there is an example further down. It goes directly below the default location, which usually looks like this:  </p> <pre><code>location / {\n    root   html;\n    index  index.html index.htm;\n}\n</code></pre> <p>The block to add looks like this (some changes can be made depending on your setup, but generally this works). Note that if the machine hosting your application is not the same as your web server, then you'll need to replace \"127.0.0.1\" with the IP of your Ombi host. Nginx is smart enough to match the \"ombi\" in your location to the \"ombi\" in your BaseURL.  </p> <pre><code>location /ombi/ {\n    proxy_pass http://127.0.0.1:5000;\n    proxy_set_header Host $host;\n    proxy_set_header X-Forwarded-Host $server_name;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Ssl on;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_read_timeout  90;\n    proxy_redirect http://127.0.0.1:5000 https://$host;\n}\n</code></pre>"},{"location":"archive/v3-specific-proxy/#nginx-with-subdomain","title":"nginx with Subdomain","text":"<p>If you wish to use ombi.example.com rather than example.com/ombi, then you need to create a site per service. You will also need to ensure that ombi is not configured to use a BaseURL. Each site has a separate config file in the sites-available directory. By default, this is <code>/etc/nginx/sites-available</code>. We're going to use the site name as the file name, so in this case we need to put the following into   <code>/etc/nginx/sites-available/ombi.example.com.conf</code> Note that this example does not enable SSL or generate a certificate, but that can be done afterwards using a tool like Certbot. Certbot will add the <code>listen 443</code>, generate, and apply the certificates using LetsEncrypt. Of course, replace <code>127.0.0.1:5000</code> with whatever IP and port combination you are using for Ombi. Ensure your Application Url (in Ombi) matches the <code>server_name</code> field.</p> <pre><code>server {\n  listen 80;\n  listen [::]:80;\n\n  server_name ombi.example.com;\n\n  location / {\n      proxy_pass http://127.0.0.1:5000/;\n  }\n}\n</code></pre> <p>Disable support for Websockets. Disable these items by commenting them out:</p> <pre><code># Allow websockets on all servers\n#proxy_http_version 1.1;\n#proxy_set_header Upgrade $http_upgrade;\n#proxy_set_header Connection \"upgrade\";\n</code></pre> <p>Once the config file has been created (and saved), we need to enable the site. This is done by symlinking the config file into the sites-enabled directory. The below commands will achieve this (obviously, replace the <code>ombi.example.com</code> sections with whatever names you used for your setup. Linux: <code>ln -s /etc/nginx/sites-available/ombi.example.com.conf /etc/nginx/sites-enabled/ombi.example.com.conf</code> Windows: <code>mklink C:\\nginx\\conf\\sites-enabled\\ombi.example.com.conf C:\\nginx\\conf\\sites-available\\ombi.example.com.conf</code> We then restart nginx to load the new config file, at which point your system will be listening on <code>http://ombi.example.com</code> for traffic (after you set up certbot, it will change to <code>https://ombi.example.com</code>). Linux: <code>service nginx restart</code> Windows: <code>nginx -s reload</code> </p>"},{"location":"archive/v3-specific-proxy/#apache","title":"Apache","text":"<p>To run Apache with a reverse proxy setup, you'll need to activate certain modules.</p>"},{"location":"archive/v3-specific-proxy/#ubuntu-1804","title":"Ubuntu 18.04","text":"<p>Note: assume all commands require sudo.  </p> <pre><code>apt-get install -y libapache2-mod-proxy-html libxml2-dev\na2enmod proxy\na2enmod proxy_http\na2enmod proxy_ajp\na2enmod rewrite\na2enmod deflate\na2enmod headers\na2enmod proxy_balancer\na2enmod proxy_connect\na2enmod proxy_html\n</code></pre> <p>In your Virtualhost configuration file you'll need to add a few things. Note: VirtualHost configurations are usually under /etc/apache2/sites-enabled/ </p> <p>Just below the <code>DocumentRoot</code> entry: <code>ProxyPreserveHost On</code> </p> <p>You can then add the configuration for each item you wish to proxy. There are two methods for doing this. One is with a 'Location' section, the other is simply a direct mapping (the dirty way). The mapping goes just before the <code>&lt;/VirtualHost&gt;</code> closing tag, regardless of the method. If you want to run ombi.example.com instead of site.example.com/ombi, then replace <code>/ombi</code> with <code>/</code> and drop the <code>/ombi</code> from the end of the internal addresses, as well as removing the BaseURL from Ombi itself.</p>"},{"location":"archive/v3-specific-proxy/#location","title":"Location","text":"<pre><code>&lt;Location /ombi&gt;\nAllow from 0.0.0.0 \nProxyPass \"http://ip.of.ombi.host:5000/ombi\" connectiontimeout=5 timeout=30 keepalive=on \nProxyPassReverse \"http://ip.of.ombi.host:5000/ombi\" \n&lt;/Location&gt;\n</code></pre>"},{"location":"archive/v3-specific-proxy/#direct-mapping","title":"Direct Mapping","text":"<pre><code>ProxyPass /ombi http://ip.of.ombi.host:5000/ombi\nProxyPassReverse /ombi http://ip.of.ombi.host:5000/ombi\n</code></pre> <p>Once all your changes are done, you'll need to run <code>service apache2 restart</code> to make the changes go live.</p>"},{"location":"archive/v3-specific-proxy/#iis","title":"IIS","text":"<p>NOTE: There are some extra steps involved with getting IIS to proxy things. Install these two modules:</p> <ul> <li>URL Rewrite</li> <li>Application Request Routing</li> </ul> <p>After installing the above, enable the proxy function via: IIS admin -&gt; Application Request Routing Cache -&gt; Server Proxy Settings, tick \"Enable proxy\"</p>"},{"location":"archive/v3-specific-proxy/#iis-with-subfolder","title":"IIS With Subfolder","text":"<ul> <li> <p>NOTE1:  Below rules assume you have a \"virtual directory\" named \"OMBI\" under your default website in IIS.  That VD should target a physical directory that resides at c:\\inetpub\\wwwroot\\ombi .  Within this directory you would place the below rules in a web.config file. There should be no other files in this directory. (This is/should NOT be your OMBI install directory)</p> </li> <li> <p>NOTE2:  Change \"example.com\"</p> </li> </ul> <pre><code>&lt;configuration&gt;\n    &lt;system.webServer&gt;\n        &lt;defaultDocument&gt;\n            &lt;files&gt;\n            &lt;/files&gt;\n        &lt;/defaultDocument&gt;\n        &lt;rewrite&gt;\n            &lt;rules&gt;\n                &lt;clear /&gt;\n                &lt;rule name=\"ReverseProxyInboundOMBI\" stopProcessing=\"true\"&gt;\n                    &lt;match url=\"(.*)\" /&gt;\n                    &lt;action type=\"Rewrite\" url=\"http://localhost:5000/ombi/{R:1}\" /&gt;\n                    &lt;serverVariables&gt;\n                        &lt;set name=\"host\" value=\"$host\" /&gt;\n                        &lt;set name=\"HTTP_X_FORWARDED_HOST\" value=\"$server_name\" /&gt;\n                        &lt;set name=\"HTTP_X_REAL_IP\" value=\"$remote_addr\" /&gt;\n                        &lt;set name=\"HTTP_X_FORWARDED_FOR\" value=\"$proxy_add_x_forwarded_for\" /&gt;\n                        &lt;set name=\"HTTP_X_FORWARDED_PROTO\" value=\"$scheme\" /&gt;\n                        &lt;set name=\"HTTP_X_FORWARDED_SSL\" value=\"on\" /&gt;\n                    &lt;/serverVariables&gt;\n                    &lt;conditions trackAllCaptures=\"true\"&gt;\n                    &lt;/conditions&gt;\n                &lt;/rule&gt;\n            &lt;/rules&gt;\n            &lt;outboundRules&gt;\n                &lt;clear /&gt;\n                &lt;rule name=\"Restore Encoding\" preCondition=\"Restore HTTP_ACCEPT_ENCODING}\" enabled=\"true\"&gt;\n                    &lt;match serverVariable=\"HTTP_ACCEPT_ENCODING\" pattern=\"^(.+)\" /&gt;\n                    &lt;conditions logicalGrouping=\"MatchAll\" trackAllCaptures=\"true\" /&gt;\n                    &lt;action type=\"Rewrite\" value=\"{HTTP_X_ORIGINAL_ACCEPT_ENCODING}\" /&gt;\n                &lt;/rule&gt;\n                &lt;rule name=\"ReverseProxyOutboundOMBI\" preCondition=\"ResponseIsHtml1\" enabled=\"true\" stopProcessing=\"false\"&gt;\n                    &lt;match filterByTags=\"A, Area, Base, Form, Frame, Head, IFrame, Img, Input, Link, Script\" pattern=\"^http(s)?://localhost:5000/ombi/(.*)\" /&gt;\n                    &lt;conditions logicalGrouping=\"MatchAll\" trackAllCaptures=\"true\"&gt;\n                        &lt;add input=\"{HTTP_REFERER}\" pattern=\"/ombi\" /&gt;\n                    &lt;/conditions&gt;\n                    &lt;action type=\"Rewrite\" value=\"http{R:1}://EXAMPLE.com/ombi/{R:2}\" /&gt;\n                &lt;/rule&gt;\n        &lt;preConditions&gt;\n            &lt;preCondition name=\"ResponseIsHtml1\"&gt;\n                &lt;add input=\"{RESPONSE_CONTENT_TYPE}\" pattern=\"^text/html\" /&gt;\n            &lt;/preCondition&gt;\n            &lt;preCondition name=\"Restore HTTP_ACCEPT_ENCODING}\"&gt;\n                &lt;add input=\"{RESPONSE_CONTENT_TYPE}\" pattern=\".+\" /&gt;\n            &lt;/preCondition&gt;\n        &lt;/preConditions&gt;\n            &lt;/outboundRules&gt;\n        &lt;/rewrite&gt;\n        &lt;security&gt;\n            &lt;authentication&gt;\n            &lt;/authentication&gt;\n        &lt;/security&gt;\n        &lt;urlCompression doStaticCompression=\"true\" doDynamicCompression=\"false\" /&gt;\n    &lt;/system.webServer&gt;\n&lt;/configuration&gt;\n</code></pre>"},{"location":"archive/v3-specific-proxy/#iis-with-subdomain","title":"IIS With Subdomain","text":"<ul> <li> <p>NOTE1:  Below rules assume you have a dedicated site to run Ombi under in IIS. The address for this needs to match your application URL in Ombi. That should target a physical directory that resides at c:\\inetpub\\ombi.  Within this directory you would place the below rules in a web.config file. There should be no other files in this directory. (This should NOT be your OMBI install directory)</p> </li> <li> <p>NOTE2:  Change \"example.com\"</p> </li> <li>NOTE 3: Change \"ombi_ip:port\" to whatever your local address for Ombi is.</li> <li>NOTE 4: Be sure you set your application URL in Ombi to whatever your site in IIS is listening to.</li> </ul> <pre><code>&lt;configuration&gt;\n    &lt;system.webServer&gt;\n        &lt;rewrite&gt;\n            &lt;rules&gt;\n                &lt;rule name=\"HTTP to HTTPS redirect\" stopProcessing=\"true\" enabled=\"false\"&gt;\n                    &lt;match url=\"(.*)\" /&gt;\n                    &lt;conditions&gt;\n                        &lt;add input=\"{HTTPS}\" pattern=\"off\" ignoreCase=\"true\" /&gt;\n                    &lt;/conditions&gt;\n                    &lt;action type=\"Redirect\" redirectType=\"Found\" url=\"https://{HTTP_HOST}/{R:1}\" /&gt;\n                &lt;/rule&gt;\n\n                &lt;rule name=\"RP_Ombi\" enabled=\"true\" stopProcessing=\"true\"&gt;\n                    &lt;match url=\"(.*)\" /&gt;\n                    &lt;action type=\"Rewrite\" url=\"http://localhost:5000/{R:1}\" /&gt;\n                    &lt;serverVariables&gt;\n                    &lt;/serverVariables&gt;\n                &lt;/rule&gt;\n            &lt;/rules&gt;\n            &lt;outboundRules&gt;\n                &lt;clear /&gt;\n                &lt;preConditions&gt;\n                    &lt;preCondition name=\"Restore HTTP_ACCEPT_ENCODING}\"&gt;\n                        &lt;add input=\"{RESPONSE_CONTENT_TYPE}\" pattern=\".+\" /&gt;\n                    &lt;/preCondition&gt;\n                &lt;/preConditions&gt;\n            &lt;/outboundRules&gt;\n        &lt;/rewrite&gt;\n    &lt;/system.webServer&gt;\n&lt;/configuration&gt; \n</code></pre>"},{"location":"archive/v3-specific-proxy/#caddy","title":"Caddy","text":"<p>Caddy 2 is a powerful, enterprise-ready, open source web server with automatic HTTPS written in Go. You can find Caddy here, and their docs can be found here. An official docker image can be found here.   Otherwise you can direct install using a binary found here.</p> <p>Note: The official binaries and Docker image do not include any of the DNS plugins required for wildcard certificates or DNS verification instead of port 80 verification. If your connection blocks port 80, you will need to build your own binary or image to include these.</p>"},{"location":"archive/v3-specific-proxy/#subdirectory","title":"Subdirectory","text":"<pre><code>site.example.com {\n    route /ombi* {\n        reverse_proxy 127.0.0.1:5000\n    }\n}\n</code></pre>"},{"location":"archive/v3-specific-proxy/#subdomain","title":"Subdomain","text":"<pre><code>ombi.example.com {\n    reverse_proxy 127.0.0.1:5000\n  }\n</code></pre>"},{"location":"archive/v3-specific-proxy/#traefik","title":"Traefik","text":"<p>Traefik is a great reverse proxy option if you are using a container-based setup such as docker compose. You can find Traefik here, and their getting started guide here. For more information and examples on the usage of labels in docker compose (specific to traefik) go here. Note: The following configuration examples only apply to traefik version 2 and later. Note 2: All examples contain additional labels not necessarily required for your setup such as wildcard SSL certificates via Let's Encrypt and SSL related headers.</p> <p>Adjust the values of <code>traefik.docker.network=traefik_proxy</code>, <code>traefik.http.routers.ombi.entrypoints=https</code> and <code>traefik.http.routers.ombi.rule=Host(`ombi.example.com`)</code> to match your specific setup.</p>"},{"location":"archive/v3-specific-proxy/#traefik-with-subdomain","title":"Traefik With Subdomain","text":"<p>The following configuration would make Ombi available at <code>https://ombi.example.com</code>.</p> <pre><code>labels:\n    - traefik.enable=true\n    - traefik.http.services.ombi.loadbalancer.server.port=3579\n    - traefik.docker.network=traefik_proxy\n    - traefik.http.routers.ombi.rule=Host(`ombi.example.com`)\n    - traefik.http.routers.ombi.entrypoints=https\n    - traefik.http.routers.ombi.tls.certresolver=letsencrypt\n    - traefik.http.routers.ombi.tls.domains[0].main=*.example.com\n    - traefik.http.routers.ombi.tls.domains[0].sans=example.com\n    - traefik.http.middlewares.ombi.headers.SSLRedirect=true\n    - traefik.http.middlewares.ombi.headers.STSSeconds=315360000\n    - traefik.http.middlewares.ombi.headers.browserXSSFilter=true\n    - traefik.http.middlewares.ombi.headers.contentTypeNosniff=true\n    - traefik.http.middlewares.ombi.headers.forceSTSHeader=true\n    - traefik.http.middlewares.ombi.headers.SSLHost=\n    - traefik.http.middlewares.ombi.headers.STSIncludeSubdomains=true\n    - traefik.http.middlewares.ombi.headers.STSPreload=true\n    - traefik.http.middlewares.ombi.headers.frameDeny=true\n</code></pre>"},{"location":"archive/v3-specific-proxy/#traefik-with-subdirectory","title":"Traefik With Subdirectory","text":"<p>The following configuration would make Ombi available at <code>https://example.com/ombi</code>. Note: When using a subdirectory it is essential to use <code>PathPrefix</code> instead of <code>Path</code>. More information here, specifically <code>Path Vs PathPrefix</code>.</p> <pre><code>labels:\n    - traefik.enable=true\n    - traefik.http.services.ombi.loadbalancer.server.port=3579\n    - traefik.docker.network=traefik_proxy\n    - traefik.http.routers.ombi.rule=PathPrefix(`/ombi`)\n    - traefik.http.routers.ombi.entrypoints=https\n    - traefik.http.routers.ombi.tls.certresolver=letsencrypt\n    - traefik.http.routers.ombi.tls.domains[0].main=*.example.com\n    - traefik.http.routers.ombi.tls.domains[0].sans=example.com\n    - traefik.http.middlewares.ombi.headers.SSLRedirect=true\n    - traefik.http.middlewares.ombi.headers.STSSeconds=315360000\n    - traefik.http.middlewares.ombi.headers.browserXSSFilter=true\n    - traefik.http.middlewares.ombi.headers.contentTypeNosniff=true\n    - traefik.http.middlewares.ombi.headers.forceSTSHeader=true\n    - traefik.http.middlewares.ombi.headers.SSLHost=\n    - traefik.http.middlewares.ombi.headers.STSIncludeSubdomains=true\n    - traefik.http.middlewares.ombi.headers.STSPreload=true\n    - traefik.http.middlewares.ombi.headers.frameDeny=true\n</code></pre>"},{"location":"archive/v3-specific-proxy/#traefik-with-subdomain-and-subdirectory","title":"Traefik With Subdomain and Subdirectory","text":"<p>The following configuration would make Ombi available at <code>https://plex.example.com/request</code>. Note: When using a subdirectory it is essential to use <code>PathPrefix</code> instead of <code>Path</code>. More information here, specifically <code>Path Vs PathPrefix</code>.</p> <pre><code>labels:\n    - traefik.enable=true\n    - traefik.http.services.ombi.loadbalancer.server.port=3579\n    - traefik.docker.network=traefik_proxy\n    - traefik.http.routers.ombi.rule=Host(`plex.example.com`) &amp;&amp; PathPrefix(`/request`)\n    - traefik.http.routers.ombi.entrypoints=https\n    - traefik.http.routers.ombi.tls.certresolver=letsencrypt\n    - traefik.http.routers.ombi.tls.domains[0].main=*.example.com\n    - traefik.http.routers.ombi.tls.domains[0].sans=example.com\n    - traefik.http.middlewares.ombi.headers.SSLRedirect=true\n    - traefik.http.middlewares.ombi.headers.STSSeconds=315360000\n    - traefik.http.middlewares.ombi.headers.browserXSSFilter=true\n    - traefik.http.middlewares.ombi.headers.contentTypeNosniff=true\n    - traefik.http.middlewares.ombi.headers.forceSTSHeader=true\n    - traefik.http.middlewares.ombi.headers.SSLHost=\n    - traefik.http.middlewares.ombi.headers.STSIncludeSubdomains=true\n    - traefik.http.middlewares.ombi.headers.STSPreload=true\n    - traefik.http.middlewares.ombi.headers.frameDeny=true\n</code></pre>"},{"location":"archive/v4-specific-proxy/","title":"V4 Specific Proxying","text":"<p>This is an NGINX subdomain reverse proxy that DOES NOT use baseurl. For running Ombi v4 on \"Docker for Windows\" (sic) with NGINX running natively on Windows 10 via OrganizrInstaller.</p> <pre><code># Ombi v4 Subdomain\n# Replace EXAMPLE.COM with your domain\nserver {\n    listen 80;\n    server_name ombi.*;\n    return 301 https://$server_name$request_uri;\n}\nserver {\n    listen 443 ssl http2;\n    server_name ombi.*;\n        server_name ombi.EXAMPLE.COM;\n        ssl_certificate /nginx/ssl/EXAMPLE.COM-chain.pem;\n        ssl_certificate_key /nginx/ssl/EXAMPLE.COM-key.pem;\n        ssl_session_cache builtin:1000;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_prefer_server_ciphers on;\n        ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';\n        ssl_session_tickets off;\n        ssl_ecdh_curve secp384r1;\n        resolver 1.1.1.1 1.0.0.1 valid=300s;\n        resolver_timeout 10s;\n        gzip on;\n        gzip_vary on;\n        gzip_min_length 1000;\n        gzip_proxied any;\n        gzip_types text/plain text/css text/xml application/xml text/javascript application/x-javascript image/svg+xml;\n        gzip_disable \"MSIE [1-6]\\.\";\n\n    location / {\n        proxy_pass http://127.0.0.1:5000;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    }\n# This allows access to the actual api\nlocation /api {\n        proxy_pass http://127.0.0.1:5000;\n}\n# This allows access to the documentation for the api\nlocation /swagger {\n        proxy_pass http://127.0.0.1:5000;\n}\n}\n</code></pre>"},{"location":"archive/v4-specific-proxy/#subdirectory-configuration","title":"Subdirectory Configuration","text":"<p>This is an NGINX reverse proxy configuration that DOES use baseurl. This has been tested both from a localhost redirect as well as through a router from a DMZ machine on Ubuntu 18.04.</p> <p>The advantage of this configuration is that it allows for a single certificate to provide ssl services for many different web apps, like so:</p> <ul> <li>www.somedomain.com/ombi</li> <li>www.somedomain.com/sonarr</li> <li>www.somedomain.com/radarr</li> </ul> <p>You would only need to install/support a certificate for www.somedomain.com.</p> <p>This configuration is if you want to run a subdirectory configuration. Note, Ombi must be started with the <code>--baseurl /ombi</code> option</p>"},{"location":"archive/v4-specific-proxy/#location-block","title":"Location Block","text":"<pre><code>location /ombi {\n    proxy_pass http://&lt;ip addr or hostname&gt;:5000;\n    include /etc/nginx/proxy.conf;\n}\n\n# This allows access to the actual api\nlocation /ombi/api {\n    proxy_pass http://&lt;ip addr or hostname&gt;:5000;\n}\n# This allows access to the documentation for the api\nlocation /ombi/swagger {\n    proxy_pass http://&lt;ip addr or hostname&gt;:5000;\n}\n</code></pre>"},{"location":"archive/v4-specific-proxy/#proxyconf","title":"proxy.conf","text":"<pre><code>client_max_body_size 10m;\nclient_body_buffer_size 128k;\n\n#Timeout if the real server is dead\nproxy_next_upstream error timeout invalid_header http_500 http_502 http_503;\n\n# Advanced Proxy Config\nsend_timeout 5m;\nproxy_read_timeout 240;\nproxy_send_timeout 240;\nproxy_connect_timeout 240;\n\n# Basic Proxy Config\nproxy_set_header Host $host:$server_port;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-Host $server_name;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_set_header X-Forwarded-Proto https;\nproxy_redirect  http://  $scheme://;\nproxy_http_version 1.1;\nproxy_set_header Upgrade $http_upgrade;\nproxy_set_header Connection \"upgrade\";\nproxy_cache_bypass $cookie_session;\nproxy_no_cache $cookie_session;\nproxy_buffers 32 4k;\nproxy_redirect http://&lt;ip addr or hostname&gt;:5000 https://$host;\n</code></pre>"},{"location":"development/building-ombi/","title":"Ombi Development","text":""},{"location":"development/building-ombi/#frontend","title":"Frontend","text":"<p>In this example I'll be using VS Code to edit the frontend.</p> <ol> <li>Clone the Repository</li> <li>Change to the relevant branch (currently <code>development</code>)</li> <li>Install the .Net Core SDK (latest) https://dotnet.microsoft.com/download/dotnet-core</li> <li>Install NodeJS and Tools for Node.js Native Modules</li> <li>Install Yarn</li> <li>Set the Env variable to development <code>$export ASPNETCORE_Environment=Development</code> or <code>$env:ASPNETCORE_ENVIRONMENT = \"Development\"</code> in Powershell</li> <li>Open up a New Terminal in the following location: <code>~src/Ombi/ClientApp</code>, run the following:</li> <li><code>yarn</code> (wait for it to install all dependencies)</li> <li><code>yarn start</code></li> <li>Go to <code>~/src/Ombi</code> in a Terminal Window and run <code>dotnet run -- --host http://*:5000</code></li> <li>Navigate to http://localhost:5000/</li> </ol> <p>You can now make UI changes and it will use Hot Module Reloading to show the changes.</p> <p>If you are doing this on your server machine changing the environment will make your Ombi install fail to run. Be sure to change the environment back to <code>production</code> to re-run Ombi.</p>"},{"location":"development/building-ombi/#backend","title":"Backend","text":"<p>To edit the backend of Ombi, you'll need to use Visual Studio.</p> <ol> <li>Clone the Repository.</li> <li>Change to the relevant branch (currently <code>development</code>).</li> <li>Install the .Net Core SDK (latest) https://dotnet.microsoft.com/download/dotnet-core.</li> <li>Install NodeJS and Tools for Node.js Native Modules.</li> <li>Install Yarn.</li> <li>Install Visual Studio (we suggest Community Edition, set up for C#).</li> <li>Open the <code>Ombi.sln</code> file in the <code>~\\src</code> folder.</li> <li>Make the changes you want made/think are needed.</li> <li>We suggest saving changes to either a new branch (if you have access), or making a fork of the repo for your edits to be kept in.</li> <li>Save often, and commit changes using the git option regularly (with logical commit messages). This helps you revert changes if you break something (and yes, we do it too).</li> <li>When ready to test the changes, set the Env variable to development <code>$export ASPNETCORE_Environment=Development</code> or <code>$env:ASPNETCORE_ENVIRONMENT = \"Development\"</code> in Powershell.</li> <li>Open up a New Terminal in the following location: <code>~src/Ombi/ClientApp</code>, run the following:</li> <li><code>yarn</code> (wait for it to install all dependencies).</li> <li><code>yarn start</code>.</li> <li>Go to <code>~/src/Ombi</code> in a Terminal Window and run <code>dotnet run -- --host http://*:5000</code>.</li> <li>Navigate to http://localhost:5000/.</li> </ol> <p>If Ombi compiles and runs successfully with your changes, you'll be able to load the web UI on the link above. If Ombi fails to compile, the error will appear in the terminal window you ran the <code>dotnet run...</code> command in - that's the compilation command. Generally speaking, it'll give you an error message with details as to why it didn't work.</p>"},{"location":"development/building-ombi/#submitting-changes","title":"Submitting Changes","text":"<p>Any changes you make to the code should be pushed up to the branch you made for working on. Once you are happy with your changes, submit a Pull Request to the Ombi repository for review.</p>"},{"location":"development/docs/","title":"Documentation","text":""},{"location":"development/docs/#framework","title":"Framework","text":"<p>This documentation is built using mkdocs.</p>"},{"location":"development/docs/#submitting-content","title":"Submitting Content","text":"<p>Please see the repository readme for information on submitting content for the site.</p>"},{"location":"development/docs/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file for the site itself.\nassets/\n    ... # Files to be included in other pages that shouldn't be directly accessible themselves.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other top-level markdown pages, including explanations of each Ombi UI page.\n    assets/\n        scripts/\n            ... # Any scripts that need to be easily downloadable from the site.\n        images/\n            embeds/\n                ... # Images for use in pages\n            ombi/\n                ... # Official Ombi images (logos etc).\n    development/\n        ... # Markdown page relating to development of or contributing to the Ombi project.\n    guides/\n        ... # Any markdown page classified as a 'guide' (installation, updating etc)\n    info/\n        ... # Any markdown page that falls under the 'info' category (explanations, supporting documentation outside of Ombi specifically)\n    settings/\n        ... # Markdown pages explaining each specific settings page\n        notifications/\n            ... # Markdown pages explaining each notification setting page\n</code></pre>"},{"location":"development/translations/","title":"Ombi Translations","text":""},{"location":"development/translations/#editing-and-contributing-to-translations","title":"Editing and contributing to translations","text":"<p>We are using Crowdin to manage the translations! All you need to do is sign up with this link to become a Translator https://crwd.in/ombi</p> <p>All translations made will then make their way into Ombi.</p>"},{"location":"guides/changing-plex-password/","title":"Changing Plex Password","text":"<p>If you are needing to change your Plex.tv password for any reason there are a few things you need to do in Ombi to re-authenticate.</p> <p>Please note that the below instructions assume that you have 'Claimed' your Plex Server after changing your credentials.</p> <ol> <li>Navigate to your Plex Settings in Ombi</li> <li>Remove the server, don't worry all of your data is still safe.</li> <li>Add a new server in, make sure to check the configuration to ensure it is correct e.g. Hostname or IP, Port (Note when using the Plex Credentials to fill in your server information, if you use 2FA then the 2FA code needs to be appended onto the end of your password)</li> <li>Save</li> </ol> <p>After following the above steps, Ombi will re-connect to your Plex server and start a new sync that will re-scan the media.</p>"},{"location":"guides/discover/","title":"Discover","text":""},{"location":"guides/discover/#coming-soon","title":"Coming Soon","text":""},{"location":"guides/donate/","title":"Donate","text":""},{"location":"guides/donate/#coming-soon","title":"Coming Soon","text":""},{"location":"guides/feature-suggestions/","title":"Feature Suggestions","text":""},{"location":"guides/feature-suggestions/#where-do-i-submit-feature-requests","title":"Where do I submit feature requests?","text":"<p>If you'd like to suggest a new feature for Ombi, this can be done over at Feature Suggestions. We are well aware that we can't think of everything, and the best place to get actual useful ideas is you, the users.  </p>"},{"location":"guides/feature-suggestions/#before-you-submit-a-suggestion","title":"Before you submit a suggestion","text":"<p>Before you submit your idea, please be sure to see if the idea has already been suggested. Existing suggestions can be voted for - the more votes an idea gets, the more likely we are to implement it! Submitting duplicate requests makes it harder for us to count up how popular an idea is, so again - check first. If it isn't already there, then absolutely submit your idea!  </p>"},{"location":"guides/installation/","title":"Installation","text":"<p>Note: After installing the system, be sure to configure your own systems to handle the requests after approval. Any requests made without an endpoint to receive it will not be able to be re-processed at this point. Whatever combination of the supported systems you use is up to you - Sonarr, Radarr, Couchpotato, Lidarr... Whatever.  </p> <p>For a guide on updating, see Update Settings For considerations when migrating an existing install rather than starting fresh, see Migrating Systems</p>"},{"location":"guides/installation/#recommended-install-workflow","title":"Recommended install workflow","text":"<ol> <li>Install Ombi for your preferred OS using the steps provided below. If you are migrating systems, rather than starting fresh, stop here and look at Migrating Systems.</li> <li>Configure your install-specific settings like the application url you'll be using externally.</li> <li>Configure external access to Ombi. We strongly recommend using a reverse proxy for a friendly URL and providing SSL.</li> <li>Configure notification methods and system connections (Sonarr, Radarr, etc). Ensure you have systems to handle approved requests before you give users access to the system.</li> <li>Import users and assign permissions.</li> </ol>"},{"location":"guides/installation/#migrating-systems","title":"Migrating Systems","text":"<p>If you're migrating Ombi from an existing install to a new install, the install process itself is exactly the same as below - with one exception, regardless of what you're migrating from or to. Depending on what database you're using, you will need to keep the following files:  </p> SQLiteMySQLMariaDB <ul> <li><code>Ombi.db</code></li> <li><code>OmbiExternal.db</code></li> <li><code>OmbiSettings.db</code></li> </ul> <ul> <li><code>database.json</code></li> </ul> <ul> <li><code>database.json</code></li> </ul> <p>When it comes time to actually launch Ombi on your fresh installation, place the relevant files into the new Ombi directory (wherever you may have put it), and then launch Ombi. This way Ombi will load with all of your prior settings, customisations, users, and synced data (so it doesn't require a full re-sync with Plex). If you are running docker, place these files into the folder you've passed into the container as \"/config\" for the installation to find them.  </p>"},{"location":"guides/installation/#windows","title":"Windows","text":"V4V4 (Develop) <ol> <li>Download the latest <code>win10-xxx.zip</code> (x64 or x86 depends on your system) from Ombi Releases</li> <li>Right click the file &gt; Properties &gt; Unblock</li> <li>Extract the zip to your preferred directory. DO NOT place in the \"Program Files\" or \"ProgramData\" folders as the Ombi database will be locked.</li> <li>Run Ombi.exe</li> </ol> <ol> <li>Download the latest <code>win10-xxx.zip</code> (x64 or x86 depends on your system) from Ombi Releases</li> <li>Right click the file &gt; Properties &gt; Unblock</li> <li>Extract the zip to your preferred directory. DO NOT place in the \"Program Files\" or \"ProgramData\" folders as the Ombi database will be locked.</li> <li>Run Ombi.exe</li> </ol>"},{"location":"guides/installation/#install-as-a-service","title":"Install as a Service","text":"<p>(This is the preferred method on Windows)</p> <ol> <li>Download the latest <code>win10-xxx.zip</code> (x64 or x86 depends on your system) from Ombi Releases</li> <li>Right click &gt; Properties &gt; Unblock</li> <li>Extract the zip to your preferred directory. In the example configs below, we've put the contents of the archive into <code>C:\\Tools\\Ombi</code>. DO NOT place in the \"Program Files\" or \"ProgramData\" folders as the Ombi database will be locked.</li> <li>Use NSSM to manage Ombi. (Download either the 32-/64-bit version, extract the archive, then put the <code>nssm.exe</code> file into <code>C:\\Windows\\system32</code>.)</li> <li>Open command prompt as an Administrator, type <code>nssm install Ombi</code>, then press Enter Use one of the below settings depending on whether you want to keep or change the default port.</li> <li>Click \"Install service\"</li> <li>In your command prompt window, type <code>net start Ombi</code> and press Enter</li> <li>Wait 10-20 seconds for Ombi to start up, then open a web browser.</li> <li>Ombi should now be reachable at http://localhost:5000.</li> </ol> Standard SetupAlternate port number <p>Be sure to adjust directories to your Ombi install location</p> <p>Path: <code>C:\\Tools\\Ombi\\Ombi.exe</code> Start directory: <code>C:\\Tools\\Ombi</code></p> <p> </p> <p>Be sure to adjust directories to your Ombi install location</p> <p>Path: <code>C:\\Tools\\Ombi\\Ombi.exe</code> Start directory: <code>C:\\Tools\\Ombi</code> Arguments: <code>--host \"http://*:PORTNUMBER\"</code></p> <p> </p>"},{"location":"guides/installation/#install-as-a-scheduled-task","title":"Install as a scheduled task","text":"<p>As an alternative to NSSM, you can use Task Scheduler to run <code>Ombi.exe</code> as if you were double clicking it and running it like a regular executable, except it's hidden from the task bar and can only be closed by the Task Manager or the Task Scheduler.</p> <ol> <li>Open 'Task Scheduler' either search for it in start. Or simply Run... Win+R <code>%windir%\\system32\\taskschd.msc</code></li> <li>Click <code>Create task...</code> on the right hand side.</li> <li>Give the task a name. Example: Ombi And a description if you want. (Not necessary)</li> <li>Check <code>Run with highest privileges</code></li> <li>Click <code>Run whether user is logged on or not</code> to ensure Ombi runs even when you are logged out!</li> <li>Check <code>Hidden</code></li> <li>Configure for: Choose your Windows version.</li> <li>Click the <code>Triggers</code> Tab and click <code>New...</code></li> <li><code>Begin the task:</code> 'At system startup. <code>Click</code> OK`</li> <li>Click the <code>Actions</code> Tab and Click <code>New...</code></li> <li>Click <code>Browse...</code> and navigate to your <code>Ombi.exe</code> Click <code>Open</code></li> <li>Fill <code>Start in (optional):</code> with <code>Ombi.exe</code>'s working directory. IE: <code>C:\\Ombi\\</code> or <code>C:\\SERVERS\\Ombi\\</code> basically, wherever you extracted your 'Ombi' folder to and where it lives. Click <code>OK</code></li> <li><code>Settings Tab</code> Un-tick <code>Stop the task if it runs longer than:</code> Click <code>OK</code></li> <li>You will be prompted for your windows user name and password. Please enter your credentials and click <code>OK</code></li> <li>Click <code>Task Scheduler Library</code> right click on your new task and hit run. give it a good 20-30 seconds to start.  Ombi should now be reachable at http://localhost:5000 !</li> </ol> <p>Note: The next time you restart your PC, Task Scheduler will run ombi for you.</p>"},{"location":"guides/installation/#scheduled-task-with-pictures","title":"Scheduled task (with pictures)","text":"<p>How to WITH PICTURES!</p>"},{"location":"guides/installation/#windows-firewall","title":"Windows Firewall","text":"<p>To allow a port through Windows Firewall, you have a few options. Note that this is not the preferred method of access, and a Reverse Proxy is recommended instead. Replace the port in the below commands with your own port if you're running a different port than the default.  </p> Command PromptPowershell <pre><code>netsh advfirewall firewall add rule name=\"Ombi\" dir=in action=allow protocol=TCP localport=5000\n</code></pre> <pre><code>New-NetFirewallRule -DisplayName 'Ombi' -Direction Inbound -Action Allow -Protocol TCP -LocalPort @('5000')\n</code></pre>"},{"location":"guides/installation/#linux-systems","title":"Linux systems","text":""},{"location":"guides/installation/#debian-apt-repo","title":"Debian / APT repo","text":"<p>Note:  We are looking for a new apt repo maintainer. The apt repo is currently very outdated, as the team member who maintained it has had to adjust his focus. Note 2: This was the easy way, and only works with Debian-based distributions. Also note that only systemd is supported, not upstart. That means Debian jessie and up, and Ubuntu 15.04 and up. Note 3:  Apt-Key has been deprecated in Ubuntu 21.xx onwards. Use the v4 (21.xx) method below for this OS.</p> V4 (Develop)V4 (Stable)V4 (PackageCloud)V4 Develop (PackageCloud)V3 (Legacy) <ol> <li>Add the apt repository to the apt sources list: <code>echo \"deb https://apt.ombi.app/develop jessie main\" | sudo tee /etc/apt/sources.list.d/ombi.list</code> </li> <li>This repo is signed. This means packages get validated before installation. So, to safely download and install Ombi packages, the Ombi key needs to be installed: <code>curl -sSL https://apt.ombi.app/pub.key | sudo apt-key add -</code> </li> <li>Update the package list and install Ombi: <code>sudo apt update &amp;&amp; sudo apt install ombi</code></li> </ol> <p>Note that this is the 'slow' ring. Fixes and features get pushed to V4 (Develop) much more rapidly than Stable. 1. Add the apt repository to the apt sources list: <code>echo \"deb https://apt.ombi.app/master jessie main\" | sudo tee /etc/apt/sources.list.d/ombi.list</code> 2. This repo is signed. This means packages get validated before installation. So, to safely download and install Ombi packages, the Ombi key needs to be installed: <code>curl -sSL https://apt.ombi.app/pub.key | sudo apt-key add -</code> 3. Update the package list and install Ombi: <code>sudo apt update &amp;&amp; sudo apt install ombi</code></p> <p>Note that this is for Ubuntu 20.xx onwards, and on the development branch, and on the new repo. 1. Add the apt repository to the apt sources list: <pre><code>echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/ombi-archive-keyring.gpg] https://packagecloud.io/Ombi-app/Ombi/debian/ jessie main\" | sudo tee /etc/apt/sources.list.d/ombi.list\necho \"deb-src [arch=amd64 signed-by=/usr/share/keyrings/ombi-archive-keyring.gpg] https://packagecloud.io/Ombi-app/Ombi/debian/ jessie main\" | sudo tee -a /etc/apt/sources.list.d/ombi.list\n</code></pre> 2. This repo is signed. This means packages get validated before installation. So, to safely download and install Ombi packages, the Ombi key needs to be installed: <code>sudo curl -sSL https://packagecloud.io/Ombi-app/Ombi/gpgkey | gpg --dearmor &gt; /usr/share/keyrings/ombi-archive-keyring.gpg</code> 3. Update the package list and install Ombi: <code>sudo apt update &amp;&amp; sudo apt install ombi</code></p> <p>Note that this is for Ubuntu 20.xx onwards, and on the development branch, and on the new repo. 1. Add the apt repository to the apt sources list: <pre><code>echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/ombi-archive-keyring.gpg] https://packagecloud.io/Ombi-app/Ombi-Dev/debian/ jessie main\" | sudo tee /etc/apt/sources.list.d/ombi.list\necho \"deb-src [arch=amd64 signed-by=/usr/share/keyrings/ombi-archive-keyring.gpg] https://packagecloud.io/Ombi-app/Ombi-Dev/debian/ jessie main\" | sudo tee -a /etc/apt/sources.list.d/ombi.list\n</code></pre> 2. This repo is signed. This means packages get validated before installation. So, to safely download and install Ombi packages, the Ombi key needs to be installed: <code>sudo curl -sSL https://packagecloud.io/Ombi-app/Ombi-Dev/gpgkey | gpg --dearmor &gt; /usr/share/keyrings/ombi-archive-keyring.gpg</code> 3. Update the package list and install Ombi: <code>sudo apt update &amp;&amp; sudo apt install ombi</code></p> <ol> <li>Add the apt repository to the apt sources list: <code>echo \"deb [arch=amd64,armhf,arm64] http://repo.ombi.turd.me/stable/ jessie main\" | sudo tee \"/etc/apt/sources.list.d/ombi.list\"</code> </li> <li>This repo is signed. This means packages get validated before installation. So, to safely download and install Ombi packages, the Ombi key needs to be installed: <code>wget -qO - https://repo.ombi.turd.me/pubkey.txt | sudo apt-key add -</code> </li> <li>Update the package list and install Ombi: <code>sudo apt update &amp;&amp; sudo apt install ombi</code></li> </ol> <p>If no errors are shown, Ombi has been installed successfully and will automatically start during boot. Ombi should now be reachable on <code>http://your-ip-address:5000</code>. If you would like to change this port, you will need to use the <code>--host</code> startup parameter.</p> <p>Packages in this repo use systemd. Use either the <code>systemctl</code> or the <code>service</code> command to start, stop, or restart Ombi.  </p>"},{"location":"guides/installation/#fedora-29","title":"Fedora 29","text":"<p>Deps: <code>compat-openssl10 libcurl-devel libunwind-devel openssl-devel</code></p> <ol> <li>Download the latest linux release for your cpu architecture.</li> <li>Extract the contents to the desired location (we suggest something like /opt/Ombi/)</li> <li><code>cd</code> to the path of the folder (e.g. <code>cd /opt/Ombi</code>)</li> <li>Execute <code>./Ombi</code>. Process should load.</li> <li>Ombi should now be reachable at localhost:5000</li> </ol>"},{"location":"guides/installation/#macos","title":"macOS","text":"<ol> <li>Download the latest osx release <code>osx-x64.tar.gz</code></li> <li>Extract the contents to the desired location (we suggest putting it in a folder in the Applications folder, <code>/Applications/Ombi</code>)</li> <li>Create a <code>.plist</code> file in the folder <code>~/Library/LaunchAgents</code> folder. (For simplicity, name it <code>Ombi.plist</code>)</li> <li>Put the below into the plist file:  </li> </ol> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n    &lt;key&gt;Label&lt;/key&gt;\n    &lt;string&gt;Ombi&lt;/string&gt;\n    &lt;key&gt;ProgramArguments&lt;/key&gt;\n    &lt;array&gt;\n        &lt;string&gt;./Ombi&lt;/string&gt;\n    &lt;/array&gt;\n    &lt;key&gt;WorkingDirectory&lt;/key&gt;\n    &lt;string&gt;/Applications/Ombi&lt;/string&gt;\n    &lt;key&gt;KeepAlive&lt;/key&gt;\n    &lt;true/&gt;\n    &lt;key&gt;RunAtLoad&lt;/key&gt;\n    &lt;true/&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;\n</code></pre> <ol> <li>Open a <code>Terminal</code> window</li> <li>Use launchctl to control the service.</li> <li>To start the service, run the command <code>launchctl load ~/Library/LaunchAgents/Ombi.plist</code></li> <li>To stop the service, run the command <code>launchctl unload ~/Library/LaunchAgents/Ombi.plist</code></li> <li>Ombi should now be reachable at localhost:5000</li> </ol>"},{"location":"guides/installation/#things-to-be-aware-of-with-macos","title":"Things to be aware of with macOS","text":"Port 5000 in useGatekeeperPreferred Method <p>MacOS Monterey now uses port 5000 as part of the AirPlay Receiver. You can either turn off AirPlay Receiver from within the Sharing options menu, or use an alternate port for Ombi. If you turn off AirPlay you will be unable to use your Mac for receiving audio via AirPlay.</p> <p>As of macOS Catalina, Apple has strengthened Gatekeeper considerably.  As a result, allowing apps from 'unverified' sources is now a hidden option. While you could outright disable Gatekeeper and allow all unverified apps to run without prompt, that is a significant hole to punch in your security for one application to work. Instead, we recommend turning it off for the folder you have Ombi in specifically. To do this, in Terminal, run <code>echo yourpassword | sudo -S xattr -r -d com.apple.quarantine /your/path/to/Ombi</code> (substituting your password and your path to Ombi). The example would put this path as /Applications/Ombi/Ombi</p> <p>Our preferred deployment method for macOS is still as a Docker container, as it does not impact security on the host OS in the same way.</p>"},{"location":"guides/installation/#docker","title":"Docker","text":"<p>The Ombi team do not currently maintain any Docker containers directly.  </p> <p>However, there are a number of them available, maintained by various members of the community. linuxserver.io keep their image the most up-to-date, and they have pretty comprehensive instructions for installation. See the page for their image here.  </p> <p>If you are considering running Ombi in a container, and are unfamiliar with how Docker works, please see Things to consider with Docker to (hopefully) help clear up some things with how networking and access works with a Docker system.  </p> <p>See also Updating for a suggested way to have your docker container be kept up to date automatically.</p>"},{"location":"guides/installation/#helm","title":"Helm","text":"<p>The Ombi team does not currently maintain a helm chart directly.  </p> <p>A popular helm chart is maintained by the guys over at k8s@home. Installation, upgrade, and removal docs are all on the artifacthub.io page </p>"},{"location":"guides/issues/","title":"Issues","text":""},{"location":"guides/issues/#coming-soon","title":"Coming Soon","text":""},{"location":"guides/migrating-databases/","title":"Migrating to MySQL","text":"<p>This guide assumes you have already configured MySQL/MariaDB to work with ombi.</p>"},{"location":"guides/migrating-databases/#migration-procedure","title":"Migration procedure","text":"<p>This would be the procedure to migrate the Ombi databases from SQLite to a MySQL/MariaDB server. If there is an error you can contact in Discord or you can open an incident here.</p>"},{"location":"guides/migrating-databases/#1-requirements","title":"1. Requirements","text":"<ul> <li>Python3</li> <li>Ombi version 4.0.728 or higher</li> </ul>"},{"location":"guides/migrating-databases/#2-download-script-and-install-dependencies","title":"2. Download Script and install dependencies","text":"<ol> <li> <p>Download the script.</p> LinuxWindows <pre><code>git clone https://github.com/vsc55/ombi_sqlite_mysql.git ombi_sqlite_mysql\ncd ombi_sqlite_mysql\nchmod +x *.py\n</code></pre> <p>Grab the migration scripts from here. Click on the <code>ombi_sqlite2mysql.py</code> and copy the contents into a new Notepad++ (or VS Code) file. Save the file in your Ombi directory as <code>ombi_sqlite2mysql.py</code>. Do the same for <code>ombi_sqlite2mysql_multi.py</code> (using the alternate name, of course).</p> </li> <li> <p>Install the dependencies according to the operating system we use.</p> Debian/UbuntuWindowsGentooPython Pip <p><code>apt-get install python3-packaging</code></p> <p>WARNING: It is not recommended to use the python3-mysqldb package on Debian/Ubuntu systems as the version it installs fails with modern versions of MariaDB/MySQL.</p> <p>Install Python, ensuring you also install <code>Pip</code> and select the option to add Python to <code>PATH</code>. Then, from a \"CMD\" window, run the same commands as you would for \"Python Pip\".</p> <p><code>emerge -va dev-python/mysqlclient</code> <code>emerge -va dev-python/packaging</code></p> <p><code>pip3 install mysqlclient</code> <code>pip3 install packaging</code> If the above errors, try <code>python -m pip install mysqlclient</code> and <code>python -m pip install packaging</code> instead.</p> </li> </ol>"},{"location":"guides/migrating-databases/#3-create-and-prepare-tables","title":"3. Create and prepare tables","text":"<ol> <li>Update to the latest version of Ombi.</li> <li>Stop Ombi</li> <li> <p>Create or Modify database.json to use mysql.     (Substitute in whatever details match your MySQL instance, which you configured previously).</p> Debian/UbuntuWindows <p><code>python ombi_sqlite2mysql.py -c /etc/Ombi --only_db_json --host 192.168.1.100 --db Ombi --user ombi --passwd ombi</code> </p> <ol> <li>In CMD, <code>cd</code> to your Ombi directory (we'll assume <code>C:\\Ombi</code> for this). If your Ombi is on a different drive, you'll need to switch to that drive letter first (i.e. for <code>E:\\Ombi</code>, you'd run <code>E:</code> followed by <code>cd E:\\Ombi</code>).</li> <li><code>python ombi_sqlite2mysql.py -c C:\\Ombi --only_db_json --host 192.168.1.100 --db Ombi --user ombi --passwd ombi</code> </li> </ol> </li> <li> <p>Only if we are going to use Multiple Databases or Multiple Servers.     To be able to use multiple servers or databases we will need to manually edit database.json.     The example below will export the \"OmbiDatabase\" and \"SettingsDatabase\" databases to the server at \"192.168.1.100\" (but to different databases on the same server), while the \"ExternalDatabase\" database will be sent to the server on \"192.168.1.200\".</p> <pre><code>{\n    \"OmbiDatabase\": {\n        \"Type\": \"MySQL\",\n        \"ConnectionString\": \"Server=192.168.1.100;Port=3306;Database=Ombi;User=ombi;Password=ombi\"\n    },\n    \"SettingsDatabase\": {\n        \"Type\": \"MySQL\",\n        \"ConnectionString\": \"Server=192.168.1.100;Port=3306;Database=Ombi_Settings;User=ombi;Password=ombi\"\n    },\n    \"ExternalDatabase\": {\n        \"Type\": \"MySQL\",\n        \"ConnectionString\": \"Server=192.168.1.200;Port=3306;Database=Ombi_External;User=ombi;Password=ombi\"\n    }\n}\n</code></pre> </li> <li> <p>Run the following command(s):</p> LinuxWindows <pre><code>/opt/ombi/Ombi --migrate\n</code></pre> <p>Note: If our sqlite database and json configuration files are stored in a different location than the one where we have Ombi installed, we will have to add the --storage argument.</p> <pre><code>/opt/ombi/Ombi --migrate --storage /etc/Ombi\n</code></pre> <p>Note: We assume that Ombi is installed in '/opt/ombi'. If it is not installed in that location use the corresponding path. If you are using docker Ombi is installed in '/opt/ombi'</p> <pre><code>C:\ncd C:\\Ombi\nombi --migrate\n</code></pre> <p>Note: If our sqlite database and json configuration files are stored in a different location than the one where we have Ombi installed, we will have to add the --storage argument.</p> <pre><code>C:\ncd C:\\Ombi\nombi --migrate --storage C:\\Ombi\n</code></pre> </li> </ol>"},{"location":"guides/migrating-databases/#4-data-migration","title":"4. Data Migration","text":"<p>When it comes to migrating the data, we have several different ways of doing it. We can export everything to a single database (step 4.1), to different databases or to different MySQL servers (step 4.2).</p>"},{"location":"guides/migrating-databases/#41-data-migration-single-database","title":"4.1. Data Migration (Single Database)","text":"<p>For data migration we will need the file \"migration.json\" that contains the locations of the SQLite databases.</p> <p>If this file does not exist, it will be created and will search the databases in the folder specified with the parameter \"--config\".</p> <p>If we don't want to migrate all the data, we can generate the file \"migration.json\" with the parameter \"--only_manager_json\" and then edit it by deleting the databases we don't want to migrate.</p>"},{"location":"guides/migrating-databases/#411-exclude-ombiexternal-from-export-optional","title":"4.1.1 Exclude OmbiExternal from export (optional)","text":"<pre><code>$ python ombi_sqlite2mysql.py -c /etc/Ombi --only_manager_json\nMigration tool from SQLite to MySql/MariaDB for ombi (x.x.x) By VSC55\n\nGenerate file \"migration.json\":\n- Saving in (/etc/Ombi/migration.json)... [\u2713]\n\n$ nano /etc/Ombi/migration.json\n</code></pre> <p>Content \"migration.json\":</p> <pre><code>{\n   \"OmbiDatabase\": {\n      \"Type\":\"sqlite\",\n      \"ConnectionString\":\"Data Source=/etc/Ombi/Ombi.db\"\n   },\n   \"SettingsDatabase\": {\n      \"Type\":\"sqlite\",\n      \"ConnectionString\":\"Data Source=/etc/Ombi/OmbiSettings.db\"\n   }\n}\n</code></pre> <ol> <li> <p>Start data migration.  </p> <p>The script will empty the tables from the MySQL/MariaDB database and automatically migrate the data from SQLite to MySQL/MariaDB.</p> <pre><code>$ python ombi_sqlite2mysql.py -c /etc/Ombi --host 192.168.1.100 --db Ombi --user ombi --passwd ombi\nMigration tool from SQLite to MySql/MariaDB for ombi (3.0.4) By VSC55\n\nGenerate file \"migration.json\":\n- Saving in (/etc/Ombi/migration.json)... [\u2713]\n\nGenerate file \"database.json\":\n- Saving in (/etc/Ombi/database.json)... [\u2713]\n\nMySQL &gt; Connecting... [\u2713]\nCheck migration.json:\n- SettingsDatabase [SQLite &gt;&gt; Migrate]\n- OmbiDatabase [SQLite &gt;&gt; Migrate]\n- ExternalDatabase [SQLite &gt;&gt; Migrate]\n\nDump SQLite:\n- SettingsDatabase  [############################################################] 27/27\n- OmbiDatabase      [############################################################] 117106/117106\n- ExternalDatabase  [############################################################] 574/574\n\nStart clean tables:\n- [CLEAN ] -&gt; ApplicationConfiguration -&gt; rows: 3\n- [CLEAN ] -&gt; AspNetRoles -&gt; rows: 12\n- [CLEAN ] -&gt; AspNetUserRoles -&gt; rows: 18\n- [CLEAN ] -&gt; AspNetUsers -&gt; rows: 6\n- [CLEAN ] -&gt; GlobalSettings -&gt; rows: 12\n- [CLEAN ] -&gt; NotificationTemplates -&gt; rows: 90\n- [BACKUP] -&gt; __EFMigrationsHistory\n- [SKIP  ] -&gt; __EFMigrationsHistory -&gt; rows: 3\n\n- Running   [############################################################] 8/8\nClean tables [\u2713]\n\nStart Migration:\n- Preparing [############################################################] 117716/117716\n- Running   [############################################################] 117641/117641\n- Checking  [############################################################] 43/43\n\nMySQL &gt; Disconnecting... [\u2713]\n</code></pre> </li> <li> <p>Start ombi and test if everything works fine.</p> </li> </ol>"},{"location":"guides/migrating-databases/#42-data-migration-multiple-databases-or-servers-mysqlmariadb","title":"4.2. Data Migration (Multiple DataBases or Servers MySql/MariaDB)","text":"<p>For data migration to multiple databases or servers we will need the file \"database_multi.json\" that contains the locations of the servers where we are going to export the data.</p> <ol> <li> <p>To create the file \"database_multi.json\" we will use the file \"database.json\" so we will only have to rename it.  </p> <pre><code>$ nano database_multi.json\n{\n    \"OmbiDatabase\": {\n        \"Type\": \"MySQL\",\n        \"ConnectionString\": \"Server=192.168.1.100;Port=3306;Database=Ombi;User=ombi;Password=ombi\"\n    },\n    \"SettingsDatabase\": {\n        \"Type\": \"MySQL\",\n        \"ConnectionString\": \"Server=192.168.1.100;Port=3306;Database=Ombi_Settings;User=ombi;Password=ombi\"\n    },\n    \"ExternalDatabase\": {\n        \"Type\": \"MySQL\",\n        \"ConnectionString\": \"Server=192.168.1.200;Port=3306;Database=Ombi_External;User=ombi;Password=ombi\"\n    }\n}\n</code></pre> <p>We can omit the export of a database by removing it from \"database_multi.json\" or adding the property \"Skip\". The example next will export the databases \"OmbiDatabase\" and \"SettingsDatabase\" but omit \"ExternalDatabase\".</p> <pre><code>$ nano database_multi.json\n{\n    \"OmbiDatabase\": {\n        \"Type\": \"MySQL\",\n        \"ConnectionString\": \"Server=192.168.1.100;Port=3306;Database=Ombi;User=ombi;Password=ombi\"\n    },\n    \"SettingsDatabase\": {\n        \"Type\": \"MySQL\",\n        \"ConnectionString\": \"Server=192.168.1.100;Port=3306;Database=Ombi_Settings;User=ombi;Password=ombi\"\n    },\n    \"ExternalDatabase\": {\n        \"Type\": \"MySQL\",\n        \"ConnectionString\": \"Server=192.168.1.200;Port=3306;Database=Ombi_External;User=ombi;Password=ombi\",\n        \"Skip\": true\n    }\n}\n</code></pre> <p>We can also send the same database to different servers with the following configuration. The next example sends databases \"OmbiDatabase\", \"SettingsDatabase\" and \"ExternalDatabase\" to servers 192.168.1.100 and 192.168.1.200.</p> <pre><code>$ nano database_multi.json\n{\n    \"OmbiDatabase\": {\n        \"Type\": \"MySQL\",\n        \"ConnectionString\": \"Server=192.168.1.100;Port=3306;Database=Ombi;User=ombi;Password=ombi\"\n    },\n    \"SettingsDatabase\": {\n        \"Type\": \"MySQL\",\n        \"ConnectionString\": \"Server=192.168.1.100;Port=3306;Database=Ombi_Settings;User=ombi;Password=ombi\"\n    },\n    \"ExternalDatabase\": {\n        \"Type\": \"MySQL\",\n        \"ConnectionString\": \"Server=192.168.1.100;Port=3306;Database=Ombi_External;User=ombi;Password=ombi\"\n    },\n    \"OmbiDatabase\": {\n        \"Type\": \"MySQL\",\n        \"ConnectionString\": \"Server=192.168.1.200;Port=3306;Database=Ombi;User=ombi;Password=ombi\"\n    },\n    \"SettingsDatabase\": {\n        \"Type\": \"MySQL\",\n        \"ConnectionString\": \"Server=192.168.1.200;Port=3306;Database=Ombi_Settings;User=ombi;Password=ombi\"\n    },\n    \"ExternalDatabase\": {\n        \"Type\": \"MySQL\",\n        \"ConnectionString\": \"Server=192.168.1.200;Port=3306;Database=Ombi_External;User=ombi;Password=ombi\"\n    }\n}\n</code></pre> <p>NOTE: If you want to export all the content to several servers we will have to repeat the point \"Create and prepare tables\" with the different servers so that all the tables are created. You will also have to modify the file database.json at the end of the export process before running ombi to leave a single server for each database.</p> </li> <li> <p>Start data migration.     &gt; The script will empty the tables from the MySQL/MariaDB database and automatically migrate the data from SQLite to MySQL/MariaDB.</p> <pre><code>$ python ombi_sqlite2mysql_multi.py -c /etc/Ombi\nMigration tool from SQLite to Multi MySql/MariaDB for ombi (1.0.0) By VSC55\n\n- Processing DataBase (OmbiDatabase)...\n-------------------\n\n- Saving in (/etc/Ombi/migration.json)... [\u2713]\nGenerate file \"database.json\":\n- Saving in (/etc/Ombi/database.json)... [\u2713]\n\nMySQL &gt; Connecting... [\u2713]\n- Reading   [############################################################] 1/1\nRead tables [\u2713]\n\nCheck migration.json:\n- OmbiDatabase [SQLite &gt;&gt; Migrate]\n- SettingsDatabase [No Config &gt;&gt; Skip]\n- ExternalDatabase [No Config &gt;&gt; Skip]\n\nDump SQLite:\n- OmbiDatabase      [############################################################] 4068/4068\n\nStart clean tables:\n- [CLEAN ] -&gt; AspNetRoles -&gt; rows: 12\n- [CLEAN ] -&gt; AspNetUserRoles -&gt; rows: 190\n- [CLEAN ] -&gt; AspNetUsers -&gt; rows: 41\n- [CLEAN ] -&gt; Audit -&gt; rows: 15\n- [CLEAN ] -&gt; ChildRequests -&gt; rows: 11\n- [CLEAN ] -&gt; EpisodeRequests -&gt; rows: 407\n- [CLEAN ] -&gt; IssueCategory -&gt; rows: 4\n- [CLEAN ] -&gt; IssueComments -&gt; rows: 1\n- [CLEAN ] -&gt; Issues -&gt; rows: 3\n- [CLEAN ] -&gt; MovieRequests -&gt; rows: 198\n- [CLEAN ] -&gt; NotificationTemplates -&gt; rows: 100\n- [CLEAN ] -&gt; NotificationUserId -&gt; rows: 2\n- [CLEAN ] -&gt; RecentlyAddedLog -&gt; rows: 2566\n- [CLEAN ] -&gt; RequestLog -&gt; rows: 247\n- [CLEAN ] -&gt; RequestQueue -&gt; rows: 6\n- [CLEAN ] -&gt; RequestSubscription -&gt; rows: 18\n- [CLEAN ] -&gt; SeasonRequests -&gt; rows: 28\n- [CLEAN ] -&gt; TvRequests -&gt; rows: 11\n- [CLEAN ] -&gt; UserNotificationPreferences -&gt; rows: 125\n- [CLEAN ] -&gt; UserQualityProfiles -&gt; rows: 20\n- [BACKUP] -&gt; __EFMigrationsHistory\n- [SKIP  ] -&gt; __EFMigrationsHistory -&gt; rows: 36\n\n- Running   [############################################################] 22/22\nClean tables [\u2713]\n\nStart Migration:\n- Preparing [############################################################] 4074/4074\n- Running   [############################################################] 4005/4005\n- Checking  [############################################################] 28/28\nMigration [\u2713]\n\nMySQL &gt; Disconnecting... [\u2713]\n\n----------------------------------------------------------------\n----------------------------------------------------------------\n\n- Processing DataBase (SettingsDatabase)...\n-------------------\n\n- Saving in (/etc/Ombi/migration.json)... [\u2713]\nGenerate file \"database.json\":\n- Saving in (/etc/Ombi/database.json)... [\u2713]\n\nMySQL &gt; Connecting... [\u2713]\n- Reading   [############################################################] 1/1\nRead tables [\u2713]\n\nCheck migration.json:\n- OmbiDatabase [No Config &gt;&gt; Skip]\n- SettingsDatabase [SQLite &gt;&gt; Migrate]\n- ExternalDatabase [No Config &gt;&gt; Skip]\n\nDump SQLite:\n- SettingsDatabase  [############################################################] 25/25\n\nStart clean tables:\n- [CLEAN ] -&gt; ApplicationConfiguration -&gt; rows: 3\n- [CLEAN ] -&gt; GlobalSettings -&gt; rows: 13\n- [BACKUP] -&gt; __EFMigrationsHistory\n- [SKIP  ] -&gt; __EFMigrationsHistory -&gt; rows: 4\n\n- Running   [############################################################] 4/4\nClean tables [\u2713]\n\nStart Migration:\n- Preparing [############################################################] 31/31\n- Running   [############################################################] 16/16\n- Checking  [############################################################] 3/3\nMigration [\u2713]\n\nMySQL &gt; Disconnecting... [\u2713]\n\n----------------------------------------------------------------\n----------------------------------------------------------------\n\n- Processing DataBase (ExternalDatabase)...\n-------------------\n\n- Saving in (/etc/Ombi/migration.json)... [\u2713]\nGenerate file \"database.json\":\n- Saving in (/etc/Ombi/database.json)... [\u2713]\n\nMySQL &gt; Connecting... [\u2713]\n- Reading   [############################################################] 1/1\nRead tables [\u2713]\n\nCheck migration.json:\n- OmbiDatabase [No Config &gt;&gt; Skip]\n- SettingsDatabase [No Config &gt;&gt; Skip]\n- ExternalDatabase [SQLite &gt;&gt; Migrate]\n\nDump SQLite:\n- ExternalDatabase  [############################################################] 5201/5201\n\nStart clean tables:\n- [CLEAN ] -&gt; PlexEpisode -&gt; rows: 2174\n- [CLEAN ] -&gt; PlexSeasonsContent -&gt; rows: 150\n- [CLEAN ] -&gt; PlexServerContent -&gt; rows: 349\n- [CLEAN ] -&gt; RadarrCache -&gt; rows: 270\n- [CLEAN ] -&gt; SonarrCache -&gt; rows: 43\n- [CLEAN ] -&gt; SonarrEpisodeCache -&gt; rows: 2194\n- [BACKUP] -&gt; __EFMigrationsHistory\n- [SKIP  ] -&gt; __EFMigrationsHistory -&gt; rows: 4\n\n- Running   [############################################################] 8/8\nClean tables [\u2713]\n\nStart Migration:\n- Preparing [############################################################] 5207/5207\n- Running   [############################################################] 5180/5180\n- Checking  [############################################################] 14/14\nMigration [\u2713]\n\nMySQL &gt; Disconnecting... [\u2713]\n\n----------------------------------------------------------------\n----------------------------------------------------------------\n\n&gt; Updating database.json...\n- Saving in (/etc/Ombi/database.json)... [\u2713]\n</code></pre> </li> <li> <p>Start Ombi and test if everything works fine.</p> </li> </ol>"},{"location":"guides/migrating-databases/#5-help","title":"5. Help","text":"<pre><code>$ python ombi_sqlite2mysql.py -h\nMigration tool from SQLite to MySql/MariaDB for ombi (3.0.4) By VSC55\n\nUsage: ombi_sqlite2mysql.py [options]\n\nOptions:\n  -h, --help            show this help message and exit\n  -c CONFIG, --config=CONFIG\n                        Path folder config ombi, default /etc/Ombi.\n  --host=HOST           Host server MySQL/MariaDB. If not defined, a file is\n                        generated with INSERT queries.\n  --port=PORT           Port server MySQL/MariaDB, default 3306.\n  --db=DB               Name database, default Ombi.\n  --user=USER           User with access to MySQL/MariaDB, default ombi.\n  --passwd=PASSWD       User password for MySQL/MariaDB, default empty.\n  --no_backup           Disable the backup of the \"__EFMigrationsHistory\"\n                        table.\n  --save_dump           Save all query insert in the file \"data_ombi.mysql\".\n  --force               Force clear all tables.\n  --only_db_json        Only create or modify the file \"database.json\" with\n                        the parameters that we specify.\n  --only_manager_json   Only create or modify the file \"migration.json\" with\n                        the parameters that we specify.\n</code></pre> <pre><code>$ python ombi_sqlite2mysql_multi.py --help\nMigration tool from SQLite to Multi MySql/MariaDB for ombi (1.0.0) By VSC55\n\nUsage: ombi_sqlite2mysql_multi.py [options]\n\nOptions:\n  -h, --help            show this help message and exit\n  -c CONFIG, --config=CONFIG\n                        Path folder config ombi, default /etc/Ombi.\n  --no_backup           Disable the backup of the \"__EFMigrationsHistory\"\n                        table.\n  --force               Force clear all tables.\n  --save_dump           Save all query insert in the file.\n</code></pre>"},{"location":"guides/migrating-databases/#6-faq","title":"6. FAQ","text":"<p>P: Migrated data verification says there is more data in SQLite than in MySQL or vice versa. </p> <pre><code>- Running   [############################################################] 9242/9242\n- [!!] -&gt; __efmigrationshistory -&gt; [SQLite (0) / MySQL (41)] = -41\n- [!!] -&gt; applicationconfiguration -&gt; [SQLite (0) / MySQL (3)] = -3\n- [!!] -&gt; aspnetroles -&gt; [SQLite (0) / MySQL (12)] = -12\n- [!!] -&gt; aspnetuserroles -&gt; [SQLite (0) / MySQL (190)] = -190\n- [!!] -&gt; aspnetusers -&gt; [SQLite (0) / MySQL (41)] = -41\n- [!!] -&gt; audit -&gt; [SQLite (0) / MySQL (15)] = -15\n- [!!] -&gt; childrequests -&gt; [SQLite (0) / MySQL (11)] = -11\n- [!!] -&gt; episoderequests -&gt; [SQLite (0) / MySQL (407)] = -407\n- [!!] -&gt; globalsettings -&gt; [SQLite (0) / MySQL (13)] = -13\n- [!!] -&gt; issuecategory -&gt; [SQLite (0) / MySQL (4)] = -4\n- [!!] -&gt; issuecomments -&gt; [SQLite (0) / MySQL (1)] = -1\n- [!!] -&gt; issues -&gt; [SQLite (0) / MySQL (3)] = -3\n- [!!] -&gt; movierequests -&gt; [SQLite (0) / MySQL (198)] = -198\n- [!!] -&gt; notificationtemplates -&gt; [SQLite (0) / MySQL (100)] = -100\n- [!!] -&gt; notificationuserid -&gt; [SQLite (0) / MySQL (2)] = -2\n- [!!] -&gt; plexepisode -&gt; [SQLite (0) / MySQL (2174)] = -2174\n- [!!] -&gt; plexseasonscontent -&gt; [SQLite (0) / MySQL (150)] = -150\n- [!!] -&gt; plexservercontent -&gt; [SQLite (0) / MySQL (349)] = -349\n- [!!] -&gt; radarrcache -&gt; [SQLite (0) / MySQL (270)] = -270\n- [!!] -&gt; recentlyaddedlog -&gt; [SQLite (0) / MySQL (2566)] = -2566\n- [!!] -&gt; requestlog -&gt; [SQLite (0) / MySQL (247)] = -247\n- [!!] -&gt; requestqueue -&gt; [SQLite (0) / MySQL (6)] = -6\n- [!!] -&gt; requestsubscription -&gt; [SQLite (0) / MySQL (18)] = -18\n- [!!] -&gt; seasonrequests -&gt; [SQLite (0) / MySQL (28)] = -28\n- [!!] -&gt; sonarrcache -&gt; [SQLite (0) / MySQL (43)] = -43\n- [!!] -&gt; sonarrepisodecache -&gt; [SQLite (0) / MySQL (2194)] = -2194\n- [!!] -&gt; tvrequests -&gt; [SQLite (0) / MySQL (11)] = -11\n- [!!] -&gt; usernotificationpreferences -&gt; [SQLite (0) / MySQL (125)] = -125\n- [!!] -&gt; userqualityprofiles -&gt; [SQLite (0) / MySQL (20)] = -20\n- Checking  [############################################################] 43/43\n</code></pre> <p>S: We will have to force the elimination of the data in all the tables with the parameter <code>--force</code> as follows.</p> <pre><code># Single Database:\n$ python ombi_sqlite2mysql.py -c /etc/Ombi --force --host 192.168.1.100 --db Ombi --user ombi --passwd ombi\n</code></pre> <pre><code># Multiple DataBases or Servers MySql/MariaDB:\n$ python ombi_sqlite2mysql_multi.py -c /etc/Ombi --force\n</code></pre> <p>P: How do I migrate if I'm using docker?</p> <p>S: Configure <code>database_multi.json</code> as needed and place it into the <code>/config</code> folder. In the docker storage config, mount the <code>ombi_sqlite_mysql</code> folder to the container (we recommend mounting it as <code>/migrate</code>). Run <code>docker exec ombi bash</code> and install the appropriate python3 tools (<code>apt update; apt install python3 python3-mysqldb -y;</code>). Run your appropriate command for python like  <code>python3 /migrate/ombi_sqlite2mysql_multi.py -c /config</code> and your migration will take place.</p> <p>P: Table \"XXX\" requiered is not exist in the server MySQL <pre><code>$ python3 ombi_sqlite2mysql.py -c /etc/Ombi  --host 127.0.0.1 --db Ombi --user ombi --passwd ombi\nMigration tool from SQLite to MySql/MariaDB for ombi (3.0.8) By VSC55\n\nGenerate file \"database.json\":\n- Saving in (/etc/Ombi/database.json)... [\u2713]\n\nMySQL &gt; Connecting... [\u2713]\n- Reading   [............................................................] 0/1\n- Error: Table \"__EFMigrationsHistory\" requiered is not exist in the server MySQL!!!\nRead tables [!!]\n\nMySQL &gt; Disconnecting... [\u2713]\n</code></pre> S: This error typically occurs when tables were not successfully created with the --migrate argument to ombi. This may be because the configuration (database.json file) and the databases are not in the same folder where we have installed ombi. The solution is to add the --storage argument when we run the migration.</p> <p>In the following example, both the database.json file and the databases are stored in /etc/Ombi: <pre><code>$ /opt/ombi/Ombi --migrate --storage /etc/Ombi\n</code></pre></p>"},{"location":"guides/mobile-app/","title":"Mobile App","text":""},{"location":"guides/mobile-app/#connecting-the-app","title":"Connecting the App","text":""},{"location":"guides/mobile-app/#qr-code-login","title":"QR Code Login","text":"<p>To enable the QR Code login, you need to ensure you have setup your Application URL.</p> <p>Once you have set that up you can find the QR code to scan under your user profile (Top right where your username is) and then press the Mobile Tab, there should now be a QR code present!</p>"},{"location":"guides/mobile-app/#mobile-browser","title":"Mobile Browser","text":"<p>If you (or your users) have difficulty with the QR method, you can also open your Ombi instance in a web browser on your mobile device. From here, tapping/clicking on the user icon (top  right) will open the user preferences page, which includes:</p> <ul> <li>Google Play (Android app) link.</li> <li>App Store (iOS app) link.</li> <li>\"Open Mobile App\" button.</li> </ul> <p>Click \"Open Mobile App\" to open the app on your device and auto-fill the settings. Note: This requires the application URL to be configured correctly, and the app to be installed already.</p>"},{"location":"guides/mobile-app/#logging-in-manually-with-plex-2fa","title":"Logging in manually with Plex 2FA","text":"<p>If you do not want to use the QR code mechanism, you still can log in manually. If you have a Plex Account with MFA/2FA enabled, you will need to enter your password in the following format: <code>password132456</code> where the <code>132465</code> is your 2FA code.</p>"},{"location":"guides/mobile-app/#application-url","title":"Application URL","text":"<p>You can find this in the Customization Settings. Make sure the application url is set to your externally accessible domain for Ombi. e.g. the demo site uses <code>https://demo.ombi.io/</code> </p> <p>A good idea is to set this up using a Reverse Proxy, rather than simply forwarding a port.</p>"},{"location":"guides/mobile-app/#common-errors","title":"Common Errors","text":""},{"location":"guides/mobile-app/#wrong-server-version","title":"Wrong Server Version","text":"<p>We're seeing a few mobile app users encountering an error message when attempting to set up the mobile app on their device saying \"Wrong server version\". This appears to be due to an inability to verify the full SSL trust chain, and is likely due to a misconfiguration in the Reverse Proxy configuration. Ensure your setup is using the Fullchain SSL certificate.</p>"},{"location":"guides/mysql-installation-windows/","title":"MySQL on Windows","text":"<p>To use MySQL we need to install the MySQL Community Server. You can download it here. If you'd like to know why we recommend MySQL over SQLite, please see Alternate Databases.</p>"},{"location":"guides/mysql-installation-windows/#download","title":"Download","text":"<p>Hit the \"Go to Download Page\" button and click on the bottom \"Download\" button. This is the offline installer, the top one is the web installer. After clicking you will be presented with a new page asking you to login or sign up. Do whatever you like here, but make sure you've also seen the \"No thanks, just start my download.\" on the bottom left.</p>"},{"location":"guides/mysql-installation-windows/#install","title":"Install","text":"<p>When the download is complete, run the installer and follow the steps below:</p> <ol> <li>Choose a Setup Type Make sure Custom is selected and click Next. </li> <li>Select Products and Features Select the following products to install:  <ul> <li>MySQL Server  </li> <li>MySQL Workbench Click on next to continue. </li> </ul> </li> <li>Installation It could give you a message that some requirements are missing. This is fine, since it will install those requirements. Click Execute. When the installation is finished, click on next. </li> </ol>"},{"location":"guides/mysql-installation-windows/#configure","title":"Configure","text":"<p>Click Next. </p>"},{"location":"guides/mysql-installation-windows/#high-availability","title":"High Availability","text":"<p>Make sure the Standalone MySQL Server is selected and click Next. </p>"},{"location":"guides/mysql-installation-windows/#type-and-networking","title":"Type and Networking","text":"<p>You now see the default settings. Nothing needs to be changed, but you can change the port if needed. Make sure that you don't forget the port number in the database.json when you are going to migrate! Click Next. </p>"},{"location":"guides/mysql-installation-windows/#authentication-method","title":"Authentication Method","text":"<p>We need to change the default setting to \"Use Legacy Authentication Method\". Since this is a security risk I would advise closing the port (3306 default) in your modem. </p>"},{"location":"guides/mysql-installation-windows/#account-and-roles","title":"Account and Roles","text":"<p>We need to set a root password which allows us to connect to MySQL Server. This password is important, as it is needed for creating databases and potential future maintenance on it. Because of this, make sure you don't forget the password! We don't need to create users here - that's done in the migration process above. </p>"},{"location":"guides/mysql-installation-windows/#windows-service","title":"Windows Service","text":"<p>You can keep the default settings here and click on Next. </p>"},{"location":"guides/mysql-installation-windows/#apply-configuration","title":"Apply Configuration","text":"<p>Now it is time to actually apply all the configuration we just set. Hit Execute. </p> <p>Once it is done, hit Finish. </p>"},{"location":"guides/mysql-installation-windows/#using-mysql-workbench","title":"Using MySQL Workbench","text":"<p>In order to run the sql commands above, you'll need to use MySQL workbench. Hit start and type MySQL Workbench. Run the application.</p> <p> </p> <p>Click on the grey block which is named: \"Local Instance\". It will pop-up a box to enter your root password which you set in the installation of MySQL Server. Once you have entered the root password it will ask if you wanna store your password in the vault. I would recommend to do so, so you don't need to enter your root password again when you connect.</p> <p> </p> <p>You can now see the workbench which is displaying your MySQL server. Enter the queries/commands you wish to run into the query editor on screen, then click on the Lightning Bolt above the code to execute them.</p> <p> </p> <p>We are done with MySQL Server and the MySQL workbench. One quick tip is that on the left side (where you found Users and Privileges) there is a Dashboard. This will show you what kind of activity is running on your MySQL Server, and can be handy to check if Ombi has a connection or not.</p>"},{"location":"guides/mysql-installation-windows/#migration-steps","title":"Migration Steps","text":"<p>Now that MySQL is installed, you can migrate your existing SQLite data to the new MySQL server to take advantage of the faster system. You can find a guide on this under migrating databases.</p>"},{"location":"guides/preferences/","title":"Preferences","text":""},{"location":"guides/preferences/#coming-soon","title":"Coming Soon","text":""},{"location":"guides/requests-list/","title":"Requests List","text":""},{"location":"guides/requests-list/#coming-soon","title":"Coming Soon","text":""},{"location":"guides/schedule-with-pictures/","title":"Task Scheduler with Pictures","text":"<ol> <li>Open 'Task Scheduler'.  Either search for it in start, or simply Run... Win+R <code>%windir%\\system32\\taskschd.msc</code> </li> <li>Click <code>Create task...</code> on the right hand side. </li> <li>Give the task a name. Example: Ombi Add a description if you want (this is not required). </li> <li>Check <code>Run with highest privileges</code></li> <li>Click <code>Run whether user is logged on or not</code> to ensure Ombi runs even when you are logged out!</li> <li>Check <code>Hidden</code> </li> <li>Configure for: (Choose your Windows version.)</li> <li>Click the <code>Triggers</code> Tab and click <code>New...</code></li> <li>Begin the task: <code>At system startup</code>. Click <code>OK</code>.  </li> <li>Click the <code>Actions</code> Tab and click <code>New...</code> </li> <li>Click <code>Browse...</code> and navigate to your <code>Ombi.exe</code> Click <code>Open</code></li> <li>Fill <code>Start in (optional):</code> with Ombi.exe's working directory. IE: <code>C:\\Ombi\\</code> or <code>C:\\SERVERS\\Ombi\\</code>. Basically, wherever you extracted your 'Ombi' folder to. Click <code>OK</code> </li> <li>Conditions: un-tick all, click 'OK'.  </li> <li>Settings Tab: Untick <code>Stop the task if it runs longer than:</code>, then click <code>OK</code>.  </li> <li>You will be prompted for your windows user name and password. Please enter your credentials, and click <code>OK</code>.</li> </ol> <p>Either restart your PC for task scheduler to take over, or manually start it in the Task Scheduler Library on the far left.</p>"},{"location":"guides/updating/","title":"Updating Ombi","text":""},{"location":"guides/updating/#automatic-updates","title":"Automatic Updates","text":"<p>Note: The built-in automatic updater is broken for 'local' installations. The developer is aware of this, as is the support team. Current development is focused on a UI rewrite - once a viable cross-platform update method has been found, it will be implemented as a fix. Automated container updates via something like WatchTower for docker installs are unaffected - only direct installs using apt/exe deployment. If you have a suggestion for an update solution, feel free to either fork the project and submit a pull request, or submit a suggestion over on Discord.</p>"},{"location":"guides/updating/#watchtower-docker","title":"Watchtower (Docker)","text":"<p>There is an option in docker to use something called 'Watchtower' to automatically update containers/images. If going this route we strongly suggest using a few extra arguments for both the Ombi container and the watchtower one. For the Ombi container, add a label to the container named <code>com.centurylinklabs.watchtower.enable</code>. Set it to <code>true</code>. For the Watchtower one, add a label to the container named <code>WATCHTOWER_LABEL_ENABLE</code>. Set it to <code>true</code>.</p>"},{"location":"guides/updating/#use-script-semi-automatic-updates","title":"Use Script (semi-automatic updates)","text":"<p>You can use your own update script here, please note that this will have to manage the termination and start of the Ombi process. You will have to terminate Ombi yourself.  </p> <ul> <li>carnivorouz - v4 Linux systemd script</li> </ul>"},{"location":"guides/updating/#script-path","title":"Script Path","text":"<p>The path to your script, we will automatically pass it the following arguments in the following order:</p> <pre><code>YourScript {UpdateDownloadUrl} --applicationPath {CurrentInstallLocation} --processname {ProcessName} --host {Ombi Host Argument} --storage {Ombi StoragePath Argument}\n</code></pre> <p>e.g.</p> <pre><code>Update.sh https://ci.appveyor.com/api/buildjobs/vxergo4kdyoaw929/artifacts/linux.tar.gz --applicationPath /opt/ombi --processname ombi --host http://*:5000 \n</code></pre> <p>This means the variables will be: {UpdateDownloadUrl}: $1 {CurrentInstallLocation}: $3 {ProcessName}: $5 {Ombi Host Argument}: $7 {Ombi StoragePath Argument}: $9  </p> <p>The <code>{UpdateDownloadUrl}</code> is the Download that will contain either the .zip or .tar.gz file. <code>{Ombi Host Argument}</code> and <code>{Ombi StoragePath Argument}</code> are the args that you may have passed into Ombi e.g. <code>Ombi Host Argument</code> could be <code>http://*:5000</code> (They are optional)</p>"},{"location":"guides/updating/#manual-updates","title":"Manual Updates","text":"<p>It is possible to update Ombi manually. To do so is fairly straightforward.  </p> SQLiteMySQL <ol> <li>Stop Ombi. You can't do anything to it if the program is running.<ul> <li>If you're running Ombi as a service, stop the service.</li> <li>If you're running Ombi manually, kill the process.</li> </ul> </li> <li>Back up the database info from the Ombi directory. There are 3 important db files (see what they do here).  <ul> <li>Ombi.db</li> <li>OmbiExternal.db</li> <li>OmbiSettings.db  </li> </ul> </li> <li>Delete the contents of the Ombi directory, excluding the files mentioned in step 2.</li> <li>Download the latest <code>windows.zip</code>  from the link below: Stable Develop</li> <li>Extract the zip to your Ombi directory.</li> <li>Start Ombi again.</li> </ol> <ol> <li>Stop Ombi. You can't do anything to it if the program is running.<ul> <li>If you're running Ombi as a service, stop the service.</li> <li>If you're running Ombi manually, kill the process.</li> </ul> </li> <li>Back up the <code>database.json</code> file from the Ombi directory. This defines how ombi connects to the MySQL server.</li> <li>Delete the contents of the Ombi directory, excluding the files mentioned in step 2.</li> <li>Download the latest <code>win10-x86.zip</code> or <code>win10-x64.zip</code> from the link below: Stable Develop</li> <li>Extract the zip to your Ombi directory.</li> <li>Start Ombi again.</li> </ol>"},{"location":"guides/updating/#external-script-windows","title":"External Script (Windows)","text":"<p>Windows users who are running Ombi as a service can make use of a Powershell script to update their Ombi instance automatically. This script can be scheduled in Task Scheduler to run at whatever cadence you specify (daily is recommended). The script will check the current version of your Ombi instance against the latest release, and if the latest version is newer than the current installed version, the script will stop the Ombi service, download and install the update, and restart the service.  </p> <p>This script only works for develop releases and should be considered beta. Do not use unless you know what you are doing.</p> <p>You can download the script from here. </p>"},{"location":"guides/updating/#installation-and-use","title":"Installation and Use","text":"<ul> <li>Back up your SQLite database and/or your database.json files from your Ombi installation. If something goes wrong with the automatic update script, these files may be deleted and will need to be recovered.</li> <li>The script deletes the contents of the Ombi folder during the update process. The update script must reside in its own folder, separate from your Ombi install folder. Do not put the script into the same folder or a subfolder within your Ombi install directory.  </li> <li>If you want to execute the script automatically using Task Scheduler, you must create a new task and fill out all the parameters as follows:  <ul> <li>Create a new task, with an informative name and description.  </li> <li>Within the Triggers tab, set the task to execute at your desired cadence. Daily is recommended.  </li> <li>Within the Action tab, create a new action. Set the task to Run whether user is logged on or not, and Run with highest privileges.  </li> <li>In the Program/script field, enter the location of your Powershell executable. This typically resides in <code>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</code>, but be sure to check the location for your system.  </li> <li>If you are using the pre-compiled executable file, enter this file's path instead. If you are using the Powershell script, add the full path to the script as the first argument in the Add arguments field.  </li> <li>Add all the remaining arguments (see instructions below) to the \"Add arguments\" field. Be sure to surround all arguments in quotation marks, and escape any spaces in folder paths. When executing the script using Task Scheduler, it is best to specify all arguments rather than relying on the default values.  </li> <li>In the \"Start in\" field, enter the location of the script file or executable.  </li> <li>When you are finished, you will be prompted to enter the credentials for the user account that the script/executable will be run using. You must use an Administrator account.  </li> </ul> </li> </ul>"},{"location":"guides/updating/#arguments","title":"Arguments","text":"<p>You will need to pass arguments to the script when calling it for it to work. The script must be run as an Administrator.  </p> <ul> <li>ApiKey This should be your API key for Ombi (found in your web interface). This is required.</li> <li>Ombidir This is the folder your copy of Ombi is running from. This is required.</li> <li>OmbiURL The address Ombi is listening on. This is required if you are using a non-standard port, IP, or baseurl. Defaults to <code>http://localhost:5000</code>.</li> <li>UpdaterPath This is where the script will download to. It's only required if you don't want them put in your downloads folder, as it defaults to a folder in your downloads folder.</li> <li>ServiceName Most of us just use 'Ombi', so it's the default. If you used something different, pass in this argument with whatever you used.</li> <li>Filename This is only for if you are using x86. If this is the case, pass in <code>Win10-x86.zip</code> as the argument. Default is <code>Win10-x64.zip</code>.  </li> <li>Force  </li> </ul> <p>This is a simple true/false switch - it will force the script to install the newest version, even if it's already installed. If the argument isn't there, it's a <code>false</code>. The moment you add <code>-Force</code> to the end of the command you'd normally use to run this script, it'll be <code>true</code> and force a reinstall.</p> <p>To pass arguments to a Powershell script, you name them when calling the script using the following syntax: <code>script -parametername 'parametervalue' -parameter2name 'parameter2value</code> </p>"},{"location":"guides/updating/#troubleshooting","title":"Troubleshooting","text":"<p>If you have difficulty getting the script/executable working, you can test the script by opening a command prompt in the folder where your script is located. Double check that you have backed up your SQLite database and/or database.json file before proceeding.  </p> <p>Copy the full path to Powershell or the executable version of the script, then copy all the parameters used in the Scheduled Task into the same command. Execute the command and take note of the output.</p>"},{"location":"guides/usermanagement/","title":"User Management","text":"<p>This section allows you to adjust per-user settings for Ombi.  </p>"},{"location":"guides/usermanagement/#alias","title":"Alias","text":"<p>This is mostly for your own ease - it lets you see who is who (in reality), instead of having to remember that the user \"YoMamaSoFat\" is actually your brother Joe (who forgets that she's his mama too - Joe is not clever). Be careful though - this is used to set the <code>{Alias}</code> variable for notifications, so if you aren't careful this field can be sent to the user.</p>"},{"location":"guides/usermanagement/#email-address","title":"Email Address","text":"<p>Please note, this is mostly only relevant for a local user. If it's someone imported from Plex, editing this is likely to break their sign-in.</p>"},{"location":"guides/usermanagement/#streaming-country","title":"Streaming Country","text":"<p>This is for if you have a user who is outside of your local area. It sets their availability date displays to their local area.  </p>"},{"location":"guides/usermanagement/#password","title":"Password","text":"<p>Again, really only useful for local users. If they use Plex Auth, this doesn't make a difference. If they're a local user, then... this is to help you be able to reset a password for a user who has forgotten theirs.  </p>"},{"location":"guides/usermanagement/#request-limits","title":"Request Limits","text":"<p>This is also where you can override request limits for each user. These are separated out based on the type of content requested (Movie, Episode, Music).  </p>"},{"location":"guides/usermanagement/#request-limit-types","title":"Request Limit Types","text":"<p>These define how a users quota is calculated. The default for this is a weekly quota, resetting at the start of each week. If someone should have a monthly quota of requests, while others should have monthly, setting this for their individual user is the way to achieve this.</p>"},{"location":"guides/usermanagement/#quality-root-path-preferences","title":"Quality &amp; Root Path Preferences","text":"<p>This lets you set an override on the defaults for a specific user. If they have their own library (tied to a specific root folder in the arr and Plex), then you can tie their user to it here. Likewise, you can set a specific quality profile for a user here. Like someone a little more than the rest? Let their requests default to a higher quality. Your idiot brother Joe annoyed you recently? Set him to SD only (if you're evil).</p>"},{"location":"guides/usermanagement/#roles","title":"Roles","text":"<p>Each individual user can have additional roles above and beyond the defaults they're imported with. You can view what the different roles mean here</p> <p>For example, if your users aren't able to request music by default, but two or three people should be allowed to - you set the default to not, under User Management, and then set their specific user to have the \"Request Music\" role. The reverse is also true - if someone abuses their ability to request things, you can revoke specific types for them in particular. Or set limits on their user.  </p> <p>If one or two users have free reign on requests, everything is a 'yes' for them - set them to be auto approved.  </p>"},{"location":"guides/usermanagement/#notification-preferences","title":"Notification Preferences","text":"<p>These let you enable alternative notification methods for a user (provided they're enabled at the server level). Refer to the notifications section for configuration of each relevant type (and a clarification about what happens when you enable multiple options at once for a user).</p>"},{"location":"guides/usermanagement/#additional-info","title":"Additional Info","text":"<p>See also User Management for how to set the defaults that users can be imported with.</p>"},{"location":"info/alternate-databases/","title":"Alternate Database Options","text":"<p>Ombi supports multiple database types, not just SQLite. The way this works is that Ombi looks for a <code>database.json</code> file in the installation directory (or, if you specified a <code>Storage Path</code> at startup, in that location e.g. AppData). If the file is not found then Ombi falls back to the default, creating or using existing SQLite databases in the Ombi directory.</p>"},{"location":"info/alternate-databases/#databasejson","title":"database.json","text":"<p>The <code>database.json</code> file needs to look like the below example (replacing usernames, passwords, and server addresses to match your own MySQL server as needed).</p> <pre><code>{\n    \"OmbiDatabase\": {\n        \"Type\":\"MySQL\",\n        \"ConnectionString\":\"Server=192.168.1.7;Port=3306;Database=Ombi;User=ombi;Password=ombi\"\n    },\n    \"SettingsDatabase\": {\n        \"Type\":\"sqlite\",\n        \"ConnectionString\":\"Data Source=C:/tmp/Settings.db\"\n    },\n    \"ExternalDatabase\": {\n        \"Type\":\"sqlite\",\n        \"ConnectionString\":\"Data Source=C:/tmp/External.db\"\n    }\n}\n</code></pre> <p>As you can see you can specify a database type and a connectionstring per database that Ombi has. You can see what each database is used for here.</p>"},{"location":"info/alternate-databases/#supported-databases","title":"Supported Databases","text":"Type ConnectionString Example SQLite Data Source=C:/tmp/Ombi.db MySQL Server=localhost;Database=Ombi;User=root;Password=123456; MariaDB Server=localhost;Database=Ombi;User=root;Password=123456; <p>*Note that MariaDB will need to be configured as <code>\"Type\":\"MySQL\"</code> in the <code>database.json</code> file.</p>"},{"location":"info/alternate-databases/#sqlite","title":"SQLite","text":"<p>The default. This requires no database.json file, and checks for the relevant db files in the application directory. It's used for pure simplicity - it can be deployed by Ombi itself, and relies on nothing external to make it work. It's also slow when it starts expanding.  </p>"},{"location":"info/alternate-databases/#mysqlmariadb","title":"MySql/MariaDB","text":""},{"location":"info/alternate-databases/#why-mysql","title":"Why MySQL","text":"<p>MySQL requires more user configuration to run - so it tends to be for more advanced users. That's why SQLite is the default - Ombi can deploy it itself. MySQL is, however, measurably better once it's configured. It handles multiple users signing in at once, and isn't subject to the same database locks that SQLite is. It is also drastically more efficient at handling data - and thus is much faster than SQLite is. How much faster depends a lot on the hardware you're running it on and the database size, of course, but we've seen improvements anywhere from 25% up to 200% (and potentially higher, depending on the system). If you are experiencing slowdowns with an SQLite setup, we strongly recommend using MySQL instead.</p>"},{"location":"info/alternate-databases/#supported-versions","title":"Supported Versions","text":"<p>Supported versions: https://github.com/PomeloFoundation/Pomelo.EntityFrameworkCore.MySql#supported-dbms-and-versions We currently recommend version 8.x and upwards - v5.7 is now end-of-life.</p>"},{"location":"info/alternate-databases/#database-character-set","title":"Database Character Set","text":"<p>Please ensure that your database character set is set to <code>utf8mb4</code>. You can check your db charset by running the following query: <code>show variables like 'character_set_database';</code> </p>"},{"location":"info/alternate-databases/#database-structure-options","title":"Database Structure Options","text":"<p>You can use a separate database per function (like SQLite does, with the 3 db files), or point all of them at the same MySQL database, as each table has a unique name regardless. It is up to you whether you use separate databases for each. For people unfamiliar with mysql, it is much easier to drop a database than to drop specific tables.</p> Single DatabaseMultiple Databases <p>This example shows using a single MySQL (ombi) database for all 'sub' databases (tables).  </p> <pre><code>{\n\"OmbiDatabase\": {\n    \"Type\": \"MySQL\",\n    \"ConnectionString\": \"Server=localhost;Port=3306;Database=Ombi;User=ombi;Password=ombi\"\n},\n\"SettingsDatabase\": {\n    \"Type\": \"MySQL\",\n    \"ConnectionString\": \"Server=localhost;Port=3306;Database=Ombi;User=ombi;Password=ombi\"\n},\n\"ExternalDatabase\": {\n    \"Type\": \"MySQL\",\n    \"ConnectionString\": \"Server=localhost;Port=3306;Database=Ombi;User=ombi;Password=ombi\"\n}\n}\n</code></pre> <p>This example shows using a separate MySQL database for each 'sub' database (tables).  </p> <pre><code>{\n\"OmbiDatabase\": {\n    \"Type\": \"MySQL\",\n    \"ConnectionString\": \"Server=localhost;Port=3306;Database=Ombi;User=ombi;Password=ombi\"\n},\n\"SettingsDatabase\": {\n    \"Type\": \"MySQL\",\n    \"ConnectionString\": \"Server=localhost;Port=3306;Database=Ombi_Settings;User=ombi;Password=ombi\"\n},\n\"ExternalDatabase\": {\n    \"Type\": \"MySQL\",\n    \"ConnectionString\": \"Server=localhost;Port=3306;Database=Ombi_External;User=ombi;Password=ombi\"\n}\n}\n</code></pre>"},{"location":"info/alternate-databases/#create-database-and-user","title":"Create database and user","text":"<p>On the MySQL/MariaDB server we will create the database and the user that we will use later. You need to <code>GRANT ALL PRIVILEGES</code> for every database you create.</p> <p>This is done in the MySQL console (or phpmyadmin if you have that configured).  </p> MySQL (recommended)MariaDB MySQL 8.1-8.3 (recommended)MySQL 8.4 (plugin needed)MySQL 5.7 (deprecated) <p>Note</p> <p>MySQL 8+ does authentication a little differently to how 5.7 used to. If Ombi fails to connect to a MySQL 8+ instance, the first thing to try is altering the user to use <code>caching_sha2_password</code> (as below). If you were previously using <code>mysql_native_password</code>, see \"Alter Existing User\" below to change it to the new (more secure) method.</p> Single DatabaseMultiple DatabasesAlter Existing User <pre><code>CREATE DATABASE IF NOT EXISTS `Ombi` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\nCREATE USER 'ombi'@'%' IDENTIFIED WITH caching_sha2_password BY 'USE_A_SECURE_PASSWORD_HERE';\nGRANT ALL PRIVILEGES ON `Ombi`.* TO 'ombi'@'%' WITH GRANT OPTION;\n</code></pre> <pre><code>CREATE DATABASE IF NOT EXISTS `Ombi` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\nCREATE DATABASE IF NOT EXISTS `Ombi_Settings` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\nCREATE DATABASE IF NOT EXISTS `Ombi_External` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\nCREATE USER 'ombi'@'%' IDENTIFIED WITH caching_sha2_password BY 'USE_A_SECURE_PASSWORD_HERE';\nGRANT ALL PRIVILEGES ON `Ombi`.* TO 'ombi'@'%' WITH GRANT OPTION;\nGRANT ALL PRIVILEGES ON `Ombi_Settings`.* TO 'ombi'@'%' WITH GRANT OPTION;\nGRANT ALL PRIVILEGES ON `Ombi_External`.* TO 'ombi'@'%' WITH GRANT OPTION;\n</code></pre> <pre><code>ALTER USER 'ombi'@'%' IDENTIFIED BY 'USE_YOUR_PASSWORD_HERE' IDENTIFIED BY caching_sha2_password;\n</code></pre> <p>Info</p> <p>As of 8.4 onwards, the <code>mysql_native_password</code> plugin has been disabled by default. If you wish to use it, it will need to be enabled for 8.4 onwards to work with Ombi. We suggest using <code>caching_sha2_password</code> instead, as it is more secure. If you were previously using <code>mysql_native_password</code>, see \"Alter Existing User\" below to change to it. If you still wish to use the old method, see the official documentation for how to enable it (at your own risk).</p> Single DatabaseMultiple DatabasesAlter Existing User <pre><code>CREATE DATABASE IF NOT EXISTS `Ombi` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\nCREATE USER 'ombi'@'%' IDENTIFIED WITH caching_sha2_password BY 'USE_A_SECURE_PASSWORD_HERE';\nGRANT ALL PRIVILEGES ON `Ombi`.* TO 'ombi'@'%' WITH GRANT OPTION;\n</code></pre> <pre><code>CREATE DATABASE IF NOT EXISTS `Ombi` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\nCREATE DATABASE IF NOT EXISTS `Ombi_Settings` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\nCREATE DATABASE IF NOT EXISTS `Ombi_External` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\nCREATE USER 'ombi'@'%' IDENTIFIED WITH caching_sha2_password BY 'USE_A_SECURE_PASSWORD_HERE';\nGRANT ALL PRIVILEGES ON `Ombi`.* TO 'ombi'@'%' WITH GRANT OPTION;\nGRANT ALL PRIVILEGES ON `Ombi_Settings`.* TO 'ombi'@'%' WITH GRANT OPTION;\nGRANT ALL PRIVILEGES ON `Ombi_External`.* TO 'ombi'@'%' WITH GRANT OPTION;\n</code></pre> <pre><code>ALTER USER 'ombi'@'%' IDENTIFIED BY 'USE_YOUR_PASSWORD_HERE' IDENTIFIED BY caching_sha2_password;\n</code></pre> <p>Warning</p> <p>Support for MySQL 5.7 ended in October 2023. After that, there have been (and will be) no further security patches or bug fixes released for it. We strongly recommend you look at migrating from 5.7 to 8.</p> Single DatabaseMultiple Databases <pre><code>CREATE DATABASE IF NOT EXISTS `Ombi` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\nCREATE USER 'ombi'@'%' IDENTIFIED BY 'ombi';\nGRANT ALL PRIVILEGES ON `Ombi`.* TO 'ombi'@'%' WITH GRANT OPTION;\n</code></pre> <pre><code>CREATE DATABASE IF NOT EXISTS `Ombi` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\nCREATE DATABASE IF NOT EXISTS `Ombi_Settings` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\nCREATE DATABASE IF NOT EXISTS `Ombi_External` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\nCREATE USER 'ombi'@'%' IDENTIFIED BY 'ombi';\nGRANT ALL PRIVILEGES ON `Ombi`.* TO 'ombi'@'%' WITH GRANT OPTION;\nGRANT ALL PRIVILEGES ON `Ombi_Settings`.* TO 'ombi'@'%' WITH GRANT OPTION;\nGRANT ALL PRIVILEGES ON `Ombi_External`.* TO 'ombi'@'%' WITH GRANT OPTION;\n</code></pre> Single DatabaseMultiple Databases <pre><code>CREATE DATABASE IF NOT EXISTS `Ombi` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\nCREATE USER 'ombi'@'%' IDENTIFIED WITH mysql_native_password USING PASSWORD('USE_A_SECURE_PASSWORD_HERE');\nGRANT ALL PRIVILEGES ON `Ombi`.* TO 'ombi'@'%' WITH GRANT OPTION;\n</code></pre> <pre><code>CREATE DATABASE IF NOT EXISTS `Ombi` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\nCREATE DATABASE IF NOT EXISTS `Ombi_Settings` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\nCREATE DATABASE IF NOT EXISTS `Ombi_External` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\nCREATE USER 'ombi'@'%' IDENTIFIED WITH mysql_native_password USING PASSWORD('USE_A_SECURE_PASSWORD_HERE');\nGRANT ALL PRIVILEGES ON `Ombi`.* TO 'ombi'@'%' WITH GRANT OPTION;\nGRANT ALL PRIVILEGES ON `Ombi_Settings`.* TO 'ombi'@'%' WITH GRANT OPTION;\nGRANT ALL PRIVILEGES ON `Ombi_External`.* TO 'ombi'@'%' WITH GRANT OPTION;\n</code></pre>"},{"location":"info/alternate-databases/#functionality","title":"Functionality","text":"<p>So long as:</p> <ul> <li><code>database.json</code> exists</li> <li>The details within it are correct</li> <li>The database(s) exist</li> <li>The user(s) exist</li> </ul> <p>Restarting ombi should generate the tables and start up ombi like it would normally.</p> <p>This will not migrate any existing settings. You effectively have a clean ombi install.</p>"},{"location":"info/alternate-databases/#installation-guides","title":"Installation Guides","text":"<p>The method for installing MySQL differs depending on your OS - guides will be added here as we write them, but the best/most up-to-date documentation for installation and configuration of MySQL will always be provided by their own website.  </p> <p>Installation on Windows</p>"},{"location":"info/alternate-databases/#data-migration","title":"Data Migration","text":"<p>You can migrate the existing SQLite databases to MySQL if you choose by following the Migration Guide </p>"},{"location":"info/api-information/","title":"API Details","text":"<p>As the API is an evolving entity, documenting it here becomes impossible. To get around this, the API documents itself, live. You can find the documentation on the API via the 'swagger' URL, <code>http://your.ombi.ip:5000/swagger</code></p> <p>This will provide you all the documentation about the available API endpoints and how to use them.</p>"},{"location":"info/api-information/#interacting-with-the-api","title":"Interacting with the API","text":"<p>There are two different ways to interact with the API</p>"},{"location":"info/api-information/#jwt-bearer-authentication","title":"JWT Bearer Authentication","text":"<ul> <li>This means you need to authenticate with a username and password and you will get a unique token that the application can use to identity that user including all roles.  </li> <li>You use this by setting an <code>Authorization</code> header with the value being <code>Bearer YOUR_TOKEN</code>.  </li> </ul>"},{"location":"info/api-information/#api-key","title":"API Key","text":"<ul> <li>You can use the API key that is found in the Ombi settings page of the application. Using the API key provides admin access to the whole system, so keep this a secret.</li> <li>You can use this by setting an <code>ApiKey</code> header, with the value being the API key from the settings page</li> <li>NOTE: when using the API Key everything is assumed to be admin, and thus has no user associated with it. If you want it to be associated with a user you need to pass in an additional header (\"UserName\"), with the value being the username of the user you would like to associate it with. If the username does not exist then the API call will fail.</li> </ul> <p>If you want to use any username (including ones that do not exist in Ombi), then pass in an <code>ApiAlias</code> header and Ombi will use that.</p>"},{"location":"info/backing-up/","title":"Backing Up Ombi","text":""},{"location":"info/backing-up/#stop-ombi","title":"Stop Ombi","text":"<p>Stop Ombi with the relevant command for your system (stop-process ombi, net stop ombi, service ombi stop, docker stop ombi...), and...</p>"},{"location":"info/backing-up/#back-up-the-databases","title":"Back up the databases","text":"SQLiteMySQL <p>Back up the SQLite db files.</p> <ul> <li>ombi.db</li> <li>ombisettings.db</li> <li>ombiexternal.db</li> </ul> <p>Back up database.json. Export your MySQL databases.</p>"},{"location":"info/common-errors/","title":"Commonly Encountered Errors","text":"<p>This page is being used for common errors outside our control, and commonly made mistakes. If you're after a fix for a known fault, see Known Faults.</p>"},{"location":"info/common-errors/#tv-show-search-results-disappear","title":"TV Show search results disappear","text":"<p>This is due to our TV Provider TVMaze not having the metadata we need to process that TV Show. We require TV Maze to supply us with a TVDBId for that show. You can easily check this by calling the TV Maze API: http://api.tvmaze.com/search/shows?q=Dexter </p> <p>You can see under the <code>externals</code> object there should be a <code>theTvDb</code> property. If that is <code>null</code> then Ombi cannot process that show.  </p> <p>You can request the <code>theTvDb</code> id to be added here </p> <p>If you search for a TV show and get this error:</p> <p></p> <p>This is most commonly caused by incorrect spelling. \ud83d\ude03</p> <p>This could also be caused by there not being enough metadata available such as <code>thetvdbid</code> and/or episode information.</p> <p>These are two checks that Ombi looks for to verify that a show exists and is available to be requested.</p> <p>Most of the time, you can freely edit the listings on TVMAZE and the theTVDB to have the information needed to make an item available.</p> <p>If you have edited the TVMAZE and/or theTVDB listings for a show, there is a time delay before the APIs have the new information.  Give it a few hours before searching again.</p>"},{"location":"info/common-errors/#docker-issues","title":"Docker Issues","text":"<p>If you're running all your services in containers, be mindful that sometimes NAT is a fickle mistress for those who fiddle. If you have services behind a reverse proxy, use the full external address for the service. If you have them behind Organizr as well, then use the Docker IP and port of each container instead - to avoid any routing or authentication issues that this can cause. If you use the host IP instead of the container IP, be sure to use the local port you mapped to the container, rather than simply the container port (these are not always the same). For a breakdown of docker networking (and some reasoning), see Docker Networking.</p>"},{"location":"info/common-errors/#proxmox-lxc-containers","title":"Proxmox LXC Containers","text":"<p><code>set LC_ALL=en_US.UTF-8</code></p> <p>or  </p> <p><code>sudo locale-gen \"en_US.UTF-8\"</code></p> <p>or  </p> <p><code>sudo dpkg-reconfigure locales</code></p> <p>and reboot</p> <p>Taken from https://github.com/Ombi-app/Ombi/issues/1783#issuecomment-351498238 </p>"},{"location":"info/common-errors/#i386-unsupported","title":"i386 unsupported","text":"<pre><code>N: Skipping acquire of configured file 'main/binary-i386/Packages' as repository 'https://apt.ombi.app/develop jessie InRelease' doesn't support architecture 'i386'\n</code></pre> <p>Replace <code>deb http://apt.ombi.app/develop jessie main</code> with  <code>deb [arch=amd64] http://apt.ombi.app/develop/ jessie main</code> in <code>/etc/apt/sources.list.d/ombi.list</code>.  </p>"},{"location":"info/common-errors/#ombi-cannot-start-after-attempting-a-mysql-migration","title":"Ombi cannot start after attempting a MySQL migration","text":"<p>Note: Only works when shifting to MySQL databases when you are already running Ombi 4.7.x, and you are staying on the same version </p> <p>In some instances, migrating the <code>__EFMigrationsHistory</code> entries fails to succeed. To get around this, we need to recreate and populate the tables manually in our MySQL server. With multiple databases (assuming they are named Ombi, Ombi_Settings, and Ombi_External), this can be achieved by running this MySQL command in your preferred MySQL interface (CLI, PHPMyAdmin, MySQL workbench etc). It will drop the invalid entries (if they exist), then create valid ones with all the current migrations (as at the time of uploading the script).  </p>"},{"location":"info/common-errors/#cannot-start-ombi-on-ubuntu-1904","title":"Cannot start Ombi on Ubuntu 19.04","text":"<p>.Net Core 5.0 is not supported officially on Ubuntu 19.04 (see Supported Distributions to confirm). Since the Ombi backend uses .Net Core, we will have to manually install the older version of libssl (from 18.10) in order to make Ombi run. To confirm this is the fault, run <code>journalctl -u Ombi -b</code> and look for the line \"<code>no usable version of libssl found</code>\" - this will confirm that this is the fix. We can do this using the following commands from a terminal:</p> <pre><code>wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl1.0/libssl1.0.0_1.0.2n-1ubuntu6_amd64.deb\nsudo dpkg -i libssl1.0.0_1.0.2n-1ubuntu6_amd64.deb\n</code></pre> <p>Start the Ombi service with <code>service Ombi start</code> and confirm that it's worked with <code>systemctl status ombi</code>.</p>"},{"location":"info/common-errors/#libunwind8-error","title":"libunwind8 error","text":"<p>libunwind.so.8: cannot open shared object file You may need to install libunwind8.  </p> <p>Run <code>apt install libunwind8</code></p>"},{"location":"info/common-errors/#mobile-notifications-pihole","title":"Mobile Notifications &amp; PiHole","text":"<p>Numerous PiHole and AdGuard lists block OneSignal by default, causing Ombi to be unable to push a notification to it and your mobile device to be unable to retrieve one from it. The error will be similar to: <code>There was an error when sending the Mobile message. Please check your settings</code>.</p> <p>Check your PiHole/Adguard immediately after hitting the \"Test Notification\" button. If you see \"onesignal.com\" being blocked, whitelist it and try again.</p>"},{"location":"info/common-errors/#ombi-failing-to-start-on-macos-monterey","title":"Ombi failing to start on macOS Monterey","text":"<p>As of macOS Monterey the AirPlay listener now uses port 5000 by default. This causes Ombi to fail to start due to the port being in use. You can turn off the AirPlay function under <code>System Preferences -&gt; Sharing</code>. This will allow Ombi to start, however AirPlay will turn on again and cause the same issue at the next reboot. The only possible workaround at present is to set the <code>host</code> startup parameter to use a different port (<code>--host http://*:new_port</code>). </p>"},{"location":"info/common-errors/#ombi-has-lost-connection-to-the-arrs","title":"Ombi has lost connection to the *arrs","text":"<p>If Ombi has previously been able to connect to something (like Sonarr) just fine, but suddenly can't, chances are a firewall has come into play for some reason. There can be other causes, of course, but if the service you've lost connection to is hosted on a Windows machine, then it's likely firewall related. Even when disabled, Windows Firewall can do some 'janky things'\u2122. Windows 10 (and 11) have a strange habit of setting themselves to a public network, at random. This can be verified in an administrator Powershell with the command <code>Get-NetConnectionProfile</code>. If it returns \"NetworkCategory: Public\", this can be easily resolved by using the command <code>Get-NetConnectionProfile | Set-NetConnectionProfile -NetworkCategory Private</code>.</p>"},{"location":"info/common-errors/#container-fails-to-start-with-coreclr-error","title":"Container fails to start with CoreCLR error","text":"<p>The error \"Failed to create CoreCLR, HRESULT: 0x80070008\" can be resolved by updating your docker engine to 20.10.10 or higher. Reference.  </p>"},{"location":"info/common-errors/#no-such-column-xrequestid","title":"No such column: x.RequestId","text":"<p>If you are on the latest version and are seeing <code>SQLite Error 1: 'No such column: x.RequestId'</code>, refer below for a solution. Referenced in Issue 3214</p> DockerUnraidDebian/Ubuntu <p>Here is a one-liner to fix the issue, assuming you are running in a docker container, your container has <code>ombi</code> in the name, your image requires the config dir to be mounted at <code>/config</code>, and the host is running Debian, Ubuntu, or a related distro that uses <code>apt</code>. If any of these points aren't true, see the details below the command and modify to your needs.</p> <pre><code>sudo apt update\nsudo apt install -y sqlite3\nsqlite3 $( \\\ndocker inspect --format '{{ range .Mounts }}{{if eq .Destination \"/config\"}}{{ .Source }}{{end}}{{end}}'  \\\n$(docker ps --filter name=ombi --format '{{.ID}}') \\\n)/app/OmbiExternal.db 'ALTER TABLE PlexServerContent ADD COLUMN RequestId INTEGER NULL'\n</code></pre> <p>Explanation of parts:</p> <p>Update <code>apt</code> &amp; install <code>sqlite3</code></p> <pre><code>sudo apt update\nsudo apt install -y sqlite3;\n</code></pre> <p>Inspect container <code>$CONTAINER_ID</code>, list mounts, and if the mount destination is <code>/config</code>, print the source</p> <pre><code>docker inspect --format \\\n'{{ range .Mounts }}{{if eq .Destination \"/config\"}}{{ .Source }}{{end}}{{end}}'  \\\n$CONTAINER_ID\n</code></pre> <p>List containers, filtering on <code>ombi</code>. Format output to only include the container id.</p> <pre><code>docker ps --filter name=ombi --format '{{.ID}}'\n</code></pre> <p>Concatenate the inspected directory path with the path to the <code>.db</code> file within the <code>/config</code> dir</p> <pre><code>$( ... )/app/OmbiExternal.db\n</code></pre> <p>Tell <code>sqlite3</code> to run the actual query</p> <pre><code>sqlite3 /opt/ombi/app/OmbiExternal.db 'ALTER TABLE PlexServerContent ADD COLUMN RequestId INTEGER NULL'\n</code></pre> <p>After you are done, you can remove <code>sqlite3</code></p> <pre><code>sudo apt remove --purge sqlite3\n</code></pre> <p>RUN:  </p> <pre><code>cd ~\nwget https://www.sqlite.org/2019/sqlite-tools-linux-x86-3300100.zip\nunzip sqlite-tools-linux-x86-3300100.zip\ncd sqlite-tools-linux-x86-3300100\nchmod a+x sqlite3\n./sqlite3 $(find / -name OmbiExternal.db -print0 -quit 2&gt;/dev/null) 'ALTER TABLE PlexServerContent ADD COLUMN RequestId INTEGER NULL'\n</code></pre> <p>If \"sqlite3\" is not installed:  </p> <pre><code>sudo apt update\nsudo apt install -y sqlite3\n</code></pre> <p>Fix Database: If your Ombi databases are in a different location than \"/etc/Ombi\", replace that with the location of your Ombi databases. </p> <pre><code>sqlite3 /etc/Ombi/OmbiExternal.db 'ALTER TABLE PlexServerContent ADD COLUMN RequestId INTEGER NULL'\n</code></pre> <p>If we want to uninstall \"sqlite3\" to clean the system.</p> <pre><code>sudo apt remove --purge sqlite3\n</code></pre>"},{"location":"info/common-errors/#wrong-server-version","title":"Wrong Server Version","text":"<p>We're seeing a few mobile app users encountering an error message when attempting to set up the mobile app on their device saying \"Wrong server version\". This appears to be due to an inability to verify the full SSL trust chain, and is likely due to a misconfiguration in the Reverse Proxy configuration. Ensure your setup is using the Fullchain SSL certificate.</p>"},{"location":"info/common-themes/","title":"Common Themes","text":""},{"location":"info/common-themes/#warning","title":"WARNING","text":"<p>V4 introduced/introduces an entirely new UI structure, and is in the process of being entirely rewritten. As such, these classes and themes are subject to change. They may or may not work. Once we finish the standardisation of CSS classes, we will write up a \"how-to\" regarding what classes we have, and validate these theme options.</p>"},{"location":"info/common-themes/#custom-colors","title":"Custom Colors","text":"<p>Note: Replace #a30000 with the hex colour you want for all the coloured UI elements (this is red). Note: Replace #121212 (currently black) with whatever you want the background colour to be. Note: A good online tool is this one Colour Selector Tool. It has RGB, HEX, and RGBA, all on one screen. You can use it to find the colour you want to change.</p> <pre><code>.navbar-default .navbar-brand {\ncolor: #a30000;\n}\n\n.nav-tabs&gt;li.active&gt;a, .nav-tabs&gt;li.active&gt;a:focus, .nav-tabs&gt;li.active&gt;a:hover {\nbackground-color: #a30000;\nborder: 1px solid #a30000;\n}\n\n.nav&gt;li&gt;a:focus, .nav&gt;li&gt;a:hover {\nbackground-color: #a30000;\n}\n\n.navbar-default .navbar-nav&gt;li&gt;a:focus, .navbar-default .navbar-nav&gt;li&gt;a:hover {\ncolor: #a30000;\nbackground-color: #121212;\n}\n\n.pace .pace-progress {\nbackground: #a30000;\nposition: fixed;\nz-index: 2000;\ntop: 0;\nright: 100%;\nwidth: 100%;\nheight: 5px;\n}\n</code></pre>"},{"location":"info/common-themes/#red-buttons","title":"Red Buttons","text":"Dark ModeLight Mode <pre><code>.dark .mat-fab.mat-accent, .dark .mat-flat-button.mat-accent, .dark .mat-mini-fab.mat-accent, .dark .mat-raised-button.mat-accent, .dark .mat-list-item.active-list-item, .dark .mat-checkbox-checked.mat-accent .mat-checkbox-background, .dark .mat-checkbox-indeterminate.mat-accent .mat-checkbox-background, .dark .buttons button[type=\"button\"], .dark .mat-tab-label-active[role=\"tab\"] {\nbackground-color: #a30000 !important;\n}\n</code></pre> <pre><code>.mat-fab.mat-accent, .mat-flat-button.mat-accent, .mat-mini-fab.mat-accent, .mat-raised-button.mat-accent, .mat-list-item.active-list-item, .mat-checkbox-checked.mat-accent .mat-checkbox-background, .mat-checkbox-indeterminate.mat-accent .mat-checkbox-background, .buttons button[type=\"button\"], .mat-tab-label-active[role=\"tab\"] {\nbackground-color: #a30000 !important;\n}\n</code></pre>"},{"location":"info/common-themes/#wider-search-bar","title":"Wider Search Bar","text":"<p>Note: The current search bar is hard coded to \"width: 50%\". This solution is neither perfect nor elegant, but it works for now.</p> <pre><code>app-nav-search mat-form-field{\n    margin-left: -50%;\n    min-width: 200%;\n}\n</code></pre>"},{"location":"info/common-themes/#hide-sign-in-with-ombi","title":"Hide \"Sign in with Ombi\"","text":"<p>(Only show \"Sign in with Plex\") Note: This css mod hides the \"Sign in with Ombi\" option (but does not disable it). A user could inspect the HTML element and \"un-hide\" the ombi login option, but the hope is \"out of sight == out of mind\".  </p> V4V3 (Legacy) <pre><code>button#sign-in{\n   display:none;\n}\n</code></pre> <pre><code>.login-buttons button:nth-of-type(1) {\n    display:none;\n}\n</code></pre>"},{"location":"info/common-themes/#use-an-image-instead-of-application-name","title":"Use an Image instead of Application Name","text":"<p>This allows you to replace the application name (on the left) with an image. The example below uses a relative location for the logo, so bear in mind that if it's hosted elsewhere you'll need to put in the complete URL to the file.  </p> <pre><code>/* Nav Bar */\n.sidenav-container .sidenav .mat-toolbar.application-name {\n    content: url(\"linktoimage/logo.png\"); \n}\n</code></pre>"},{"location":"info/common-themes/#hide-play-on-plex-button","title":"Hide \"Play on Plex\" button","text":"<pre><code>a#viewOnPlexButton {\ndisplay:none;\n}\n</code></pre>"},{"location":"info/common-themes/#hide-stream-on-services","title":"Hide \"Stream On\" services","text":"<pre><code>#streamingContainer {\n    display: none;\n}\n.streaming-on\n{\n    display: none;\n}\n</code></pre>"},{"location":"info/common-themes/#community-themes","title":"Community Themes","text":"<p>People with their own repositories of themes can have ones they'd like shared publicly linked here. Please note that these are not tested or endorsed by the Ombi\u2122 team. Any 'jank' encountered is down to the maintainer of the theme.</p> <ul> <li>Theme-Park</li> <li>OmbiFlix (Dark Netflix Clone)</li> </ul>"},{"location":"info/common-themes/#hide-media-types","title":"Hide Media Types","text":"<p>Note: You're basically hiding the ID of whatever tab you want to hide using a CSS tag. This only works for V3 (legacy) builds, as V4 is no longer tabbed like this.</p> TV ShowsMoviesMusic <pre><code>#TVtab {\n    display: none;\n}\n</code></pre> <pre><code>#Moviestab {\n    display: none;\n}\n</code></pre> <pre><code>#Music {\n    display: none;\n}\n</code></pre>"},{"location":"info/common-themes/#contributors","title":"Contributors","text":"<p>Please thank all the people posting their custom CSS and the people below. Most of these are from the community at large, so credit where credit is due.</p> RedditGithubDiscord <p>sokotaro </p> <ul> <li>Remove Sign In with Ombi</li> <li>Increase Search bar on Mobile</li> </ul> <p>Rockfist93 </p> <ul> <li>Default Light Theme</li> <li>Default Dark Theme</li> </ul> <p>bigworm50 </p> <ul> <li>Custom Colored UI</li> </ul> <p>zimreapers </p> <ul> <li>Hide Movies,TV-Shows,and Music Tabs</li> </ul> <p>DevilsCoder </p> <ul> <li>OmbiFlix (Dark Netflix Clone)</li> </ul> <p>Alacard</p> <ul> <li>Hide \"Stream on\" services</li> </ul>"},{"location":"info/docker-containers/","title":"Docker Intro","text":"<p>If you're running Ombi in a Docker container, then chances are you're running other services in one as well. There are things to consider when doing this - primarily, how are your containers going to communicate with each other/other machines?  </p>"},{"location":"info/docker-containers/#installation","title":"Installation","text":""},{"location":"info/docker-containers/#direct-command","title":"Direct Command","text":"<p>If you just want Ombi to run, it's entirely possible to do this without having to do much actual configuration. You'll (ideally) need a location mounted for Ombi to put config files (<code>/opt/ombi/config/</code> tends to be a good option on linux based systems). To create the folder and run Ombi on port 3579 (the default for v4), run the following from the terminal/shell:  </p> <pre><code>mkdir -p /opt/ombi/config/\ndocker run -d --name=ombi -p 5000:5000 --restart=unless-stopped -v /opt/ombi/config:/config linuxserver/ombi:latest\n</code></pre> <p>This will create the folder and a container named \"ombi\" that you can then manage like any other docker container. If you wish to use MySQL as a database for ombi, then you'll need to create a \"database.json\" file in the config folder created before. Details for the file can be found here.  </p>"},{"location":"info/docker-containers/#docker-compose","title":"Docker Compose","text":"<p>Here an example of a docker-compose stack with Ombi, MySQL and phpMyAdmin. Please bear in mind that this is just an example and can/should be changed to your needs:  </p> <ol> <li> <p>Create a folder for your \"/config\"-volume and for the MySQL-container</p> <pre><code>mkdir -p /opt/ombi/config/\nmkdir -p /opt/ombi/mysql/\n</code></pre> </li> <li> <p>Create a \"database.json\"-file in the folder from step 1 with this content \u2192 see here:</p> <pre><code>{\n  \"OmbiDatabase\": {\n    \"Type\": \"MySQL\",\n    \"ConnectionString\": \"Server=mysql_db;Port=3306;Database=Ombi;User=ombi;Password=ombi\"\n  },\n  \"SettingsDatabase\": {\n    \"Type\": \"MySQL\",\n    \"ConnectionString\": \"Server=mysql_db;Port=3306;Database=Ombi_Settings;User=ombi;Password=ombi\"\n  },\n  \"ExternalDatabase\": {\n    \"Type\": \"MySQL\",\n    \"ConnectionString\": \"Server=mysql_db;Port=3306;Database=Ombi_External;User=ombi;Password=ombi\"\n  }\n}\n</code></pre> </li> <li> <p>Create a \"docker-compose.yml\" file in the folder from step 1 with this content: (replace the <code>TZ</code> value with your timezone)</p> <pre><code>---\nversion: \"3\"\nservices:\n  ombi:\n    image: ghcr.io/linuxserver/ombi:latest\n            container_name: ombi\n    restart: unless-stopped\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Europe/Zurich\n    volumes:\n      - /opt/ombi/config:/config\n    ports:\n      - \"5000:3579\"\n    depends_on:\n    - \"mysql_db\"\n\n  mysql_db:\n    image: \"mysql:lts\"\n    container_name: ombi_mysql\n    restart: unless-stopped\n    environment:\n      MYSQL_ROOT_PASSWORD: 123 #change your root password here\n    volumes:\n      -  /opt/ombi/mysql:/var/lib/mysql\n\n  phpmyadmin:\n      image: phpmyadmin/phpmyadmin\n      container_name: ombi_phpmyadmin\n      restart: unless-stopped\n      environment:\n        PMA_HOST: mysql_db\n      ports:\n        - '8080:80'\n      depends_on:\n        - \"mysql_db\"\n</code></pre> </li> <li> <p>Run docker-compose to start this stack</p> <pre><code>cd /opt/ombi/config\ndocker-compose up -d\n</code></pre> </li> <li> <p>Open the phpMyadmin website \"http://docker-host-ip:8080/server_sql.php\". Login with root and your chosen password, then run the following commands:</p> <pre><code>CREATE DATABASE IF NOT EXISTS `Ombi` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\nCREATE DATABASE IF NOT EXISTS `Ombi_Settings` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\nCREATE DATABASE IF NOT EXISTS `Ombi_External` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\nCREATE USER 'ombi'@'%' IDENTIFIED BY 'ombi';\nGRANT ALL PRIVILEGES ON `Ombi`.* TO 'ombi'@'%' WITH GRANT OPTION;\nGRANT ALL PRIVILEGES ON `Ombi_Settings`.* TO 'ombi'@'%' WITH GRANT OPTION;\nGRANT ALL PRIVILEGES ON `Ombi_External`.* TO 'ombi'@'%' WITH GRANT OPTION;\n</code></pre> </li> <li> <p>Stop the stack and start it again</p> <pre><code>cd /opt/ombi/config\ndocker-compose down \ndocker-compose up -d\n</code></pre> </li> <li> <p>Open Ombi \"http://docker-host-ip:5000\" and setup your ombi installation.</p> </li> </ol>"},{"location":"info/docker-containers/#considerations","title":"Considerations","text":""},{"location":"info/docker-containers/#host-vs-bridge-networking","title":"Host vs Bridge Networking","text":""},{"location":"info/docker-containers/#host","title":"Host","text":"<p>Host networking gives the container direct access to the network adapter of the host machine (the one running Docker). This means that the container runs like any other network application, with complete freedom to discover other devices/services on your network. It is appropriate for some systems (like Home Assistant), but one of the benefits of Docker is the 'isolation' of services (so nothing depends on anything else).  </p>"},{"location":"info/docker-containers/#bridge","title":"Bridge","text":"<p>Bridge networking makes the Docker Host behave like a VM Host and a router, with a whole separate virtual network behind its own LAN IP. Each container then gets an IP in a whole different IP range than your LAN itself. Usually, Docker uses 172.17.0.x for these. If the Ombi container was given 172.17.0.3, then it would listen on 172.17.0.3:5000 (for example). This means that you map ports from the host to the container, much like port forwarding for access from outside your network (as you would for passing ports 80 and 443 to your web server, for instance). The two ports do not have to be the same - you could map 3589 on your host to point to 3579 on your container. To access the service from outside of the Docker host, you'd browse to the LAN IP of said host and the port you mapped - 3589 in the example above. Docker would see the traffic hit the host on 3589 and pass it through (via Network Address Translation, or 'NAT') to the container on 172.17.0.3:5000</p>"},{"location":"info/docker-containers/#talking-to-other-services","title":"Talking to Other Services","text":"<p>If you have an Ombi container, and a Sonarr container (or Radarr/Lidarr/CouchPotato etc), then these services will all need to talk to each other. If you've configured your containers to use host networking, then all you'll need to do is use the LAN IP of the Docker host as the IP of the service. However, if you've used bridge, then you can use either the container IP or the container name instead (as this stays inside the virtual network that the host created for all the containers to communicate via). For example, if you have a Sonarr container named \"sonarr\" that has an IP of 172.17.0.17, then you could either enter \"sonarr\" or \"172.17.0.17\" as the address for Ombi to reach Sonarr.  </p>"},{"location":"info/docker-containers/#finding-container-ip-addresses","title":"Finding Container IP addresses","text":"<p>If you want to get the container IP, then you'll need to query docker for it. Most GUI options for Docker will report it (Portainer is a good one). If you prefer the CLI/console/bash/shell, then you can inspect the container that way with the below command:</p> <pre><code>docker inspect &lt;container name&gt; | grep \"IPAddress\"\n</code></pre> <p>If you don't recall what name you used for the container, then you can find out your container names with:</p> <pre><code>docker container ps\n</code></pre>"},{"location":"info/faq/","title":"FAQ","text":"<p>If you feel like a question should be added please reach out via the Ombi Discord. See also: Known Faults, Common Errors</p>"},{"location":"info/faq/#how-do-i-request-a-feature-be-added-to-ombi","title":"How do I request a feature be added to Ombi","text":"<p>See Feature Suggestions</p>"},{"location":"info/faq/#what-is-the-plex-connection-used-for","title":"What is the Plex connection used for","text":"<ul> <li>It allows for using oAuth sign-in (so users don't have to add another password to the mix).</li> <li>It allows for checking for actual availability (not just in place according to *arr, but indexed in a library and actually watchable).</li> <li>It allows for Ombi to use a plex ID for the link in newsletters etc - so users can click the notification and be taken directly to the item in Plex.</li> </ul>"},{"location":"info/faq/#can-i-synchronise-users-between-ombi-and-tautulli","title":"Can I synchronise users between Ombi and Tautulli?","text":"<p>Yes, you can. This is a little more involved than some people are comfortable with, as it's not officially supported. If that doesn't worry you, and you're comfortable with running custom scripts and Python code, then you can check out the script created by DirtyCajunRice here.</p>"},{"location":"info/faq/#how-do-i-get-the-qr-code-for-mobile-connections","title":"How do I get the QR code for mobile connections?","text":"<p>Ensure that the application URL has been entered.  </p>"},{"location":"info/faq/#database-uses","title":"Database uses","text":"<p>There are 3 databases that Ombi uses.</p> OmbiOmbiExternalOmbiSettings <p>This contains Ombi specific information e.g. Users, Requests, Issues</p> <p>This contains the information we take from external providers e.g. Plex Server Content, Radarr Content, Sonarr Content</p> <p>This contains all of the settings that you have applied to Ombi e.g. Notification Preferences, SMTP Settings, Sonarr Settings, Plex Settings</p>"},{"location":"info/faq/#how-can-i-include-ombi-logs-in-logarr","title":"How can I include Ombi logs in Logarr?","text":"<p>Because Ombi adds the date into the name of the log file, you can't hard-code to the latest log file - the link will be incorrect the next day. Instead, we can use the php date() function and string concatenation (.) to build the path on the fly when we are in Logarr. The logs are named in the format <code>log-yyyymmdd.txt</code> - so January 14, 2019 would be <code>log-20190114.txt</code>. php date(Ymd) gives us the date in that format, and we can concatenate it into our ombi log path in Logarr configs like so: (Note: change folder paths to match your own install directory of Ombi.) </p> <pre><code>\"Ombi\" =&gt; 'C:\\Services\\Ombi\\Logs\\log-' . date(\"Ymd\") . '.txt',\n</code></pre> <p>You can also use similar code for any software which hard-codes the date into the config. It's not uncommon.</p>"},{"location":"info/faq/#can-i-force-requests-to-re-add-to-client-systems","title":"Can I force requests to re-add to client systems?","text":"<p>Some people make the mistake of letting users request content before they configure the client systems to receive the requests (Sonarr/Radarr/CouchPotato/SickRage/Lidarr etc). To force Ombi to attempt to re-process the request (and send it to the relevant system):</p> The UI WayThe SQL way (unsupported) <ol> <li>Open Ombi.</li> <li>Click \"Requests\" (left hand menu).</li> <li>Find the relevant request in the lists.</li> <li>Click \"Details\".</li> <li>Click the little gear icon (top right).</li> <li>Click \"Re-Process Request\".</li> </ol> <p></p> <p>In older versions of Ombi, there was no way to force the software to 're-add' the requested item to the downloader/monitoring system. To achieve this, you would need to open the Ombi.db file and execute commands on it manually (Ombi will need to be stopped for this to work), marking the relevant requests as \"needs approval\" via an SQL command. This would allow you to then click \"approve\" and have Ombi add the request to the relevant application and continue as normal.  </p> <p>Note: this is not supported officially and carries risks. The relevant commands are:  </p> <pre><code>UPDATE AlbumRequests\nSET Approved = 0\nWHERE Approved = 1 AND Available = 0;\n\nUPDATE ChildRequests\nSET Approved = 0\nWHERE Approved = 1 AND Available = 0;\nUPDATE EpisodeRequests\nSET Approved = 0\nWHERE Approved = 1 AND Available = 0;\n\nUPDATE MovieRequests\nSET Approved = 0 \nWHERE Approved = 1 AND Available = 0;\n</code></pre>"},{"location":"info/faq/#tv-shows-and-episodes-not-showing-as-available","title":"TV shows and episodes not showing as available","text":"<p>The most common reason for this is that we require TVDB information to match against, and your TV library in Plex probably doesn't have this metadata information. To fix this you need to ensure your TV Library in Plex is using an agent that provides this ID. We suggest \"TheTVDB\". Edit Library &gt; Advanced &gt; Agent = TheTVDB</p> <p>Refresh the metadata for that library, and next time the Plex Sync job runs it should pick up that the content now has TheTVDB Id's!</p>"},{"location":"info/faq/#notifications-are-not-sending-but-mass-email-works","title":"Notifications are not sending, but mass email works","text":"<p>Before any notifications will work properly you'll need to ensure you have configured your application URL under Settings -&gt; Customization. This is due to Ombi needing to know where to send users if they click any links within the notifications.</p>"},{"location":"info/faq/#notifications-for-requests-not-being-received","title":"Notifications for requests not being received","text":"<ol> <li>Check and test if you have configured the notification(s) as per instructions in Discord Notification Settings and Email Notification Settings</li> <li>If testing the notification(s) work fine then make sure that the user requesting is not an auto approve or admin user</li> </ol>"},{"location":"info/faq/#ombi-does-not-default-to-english-or-my-preferred-language","title":"Ombi does not default to English or my preferred language","text":"<p>Once you have set your preferred language in the user preferences area of Ombi, then it's attached to your user profile. When Ombi loads up, it checks what was set and will use that. If nothing has been set then Ombi sets whatever is the first language your browser presents to it. If this does not get presented properly, this is mostly an issue with Chrome. You can run the command <code>navigator.languages</code> in the Chrome console to see the list. To get Ombi to display the language you want, make that language appear as the first entry in the above command.</p> <p>You can do this by:</p> <ul> <li>Open the Chrome Language Settings page <code>chrome://settings/languages</code></li> <li>Click the down arrow next to Language</li> <li>Click the 3 ellipses by the language you want to set as default</li> <li>Click move to the top.</li> </ul> <p>Please set Chrome to use this as display language as well.</p>"},{"location":"info/faq/#how-do-i-enable-debug-logging","title":"How do I enable debug logging?","text":"<p>In order to enable debug logging in Ombi, you'll need to edit a file called <code>appsettings.json</code>. In most cases, this is in the application directory. In a docker container, this is in /app/ombi inside the container.  </p> <p>Change the <code>Default</code> entry under <code>LogLevel</code> from \"Warning\" to \"Debug\". You will need to restart Ombi after changing the file for the changes to apply.  </p> <p>Do not forget to disable debug logging once you are done - it is for troubleshooting, and should not be left enabled full-time.</p> Default LoggingDebug LoggingTrace Logging <pre><code>\"Logging\": {\n    \"IncludeScopes\": false,\n    \"LogLevel\": {\n    \"Default\": \"Warning\",\n    \"System\": \"Warning\",\n    \"Microsoft\": \"Warning\",\n    \"Hangfire\": \"None\",\n    \"System.Net.Http.HttpClient.health-checks\": \"Warning\",\n    \"HealthChecks\": \"Warning\"\n    }\n},\n\"Serilog\": {\n    \"MinimumLevel\": \"Warning\"\n},\n</code></pre> <pre><code>\"Logging\": {\n    \"IncludeScopes\": false,\n    \"LogLevel\": {\n    \"Default\": \"Debug\",\n    \"System\": \"Debug\",\n    \"Microsoft\": \"Warning\",\n    \"Hangfire\": \"None\",\n    \"System.Net.Http.HttpClient.health-checks\": \"Warning\",\n    \"HealthChecks\": \"Warning\"\n    }\n},\n\"Serilog\": {\n    \"MinimumLevel\": \"Debug\"\n},\n</code></pre> <pre><code>\"Logging\": {\n    \"IncludeScopes\": false,\n    \"LogLevel\": {\n    \"Default\": \"Trace\",\n    \"System\": \"Trace\",\n    \"Microsoft\": \"Trace\",\n    \"Hangfire\": \"None\",\n    \"System.Net.Http.HttpClient.health-checks\": \"Warning\",\n    \"HealthChecks\": \"Warning\"\n    }\n},\n\"Serilog\": {\n    \"MinimumLevel\": \"Trace\"\n},\n</code></pre>"},{"location":"info/faq/#why-are-some-of-my-plex-users-not-importing","title":"Why are some of my Plex users not importing?","text":"<p>Only Plex users who you have shared your server/libraries with can be imported. Plex does not expose managed accounts for Ombi to be able to import them, as they are not completely standalone accounts.</p>"},{"location":"info/known-faults/","title":"Known Faults","text":"<p>Any and all common bugs that we are aware of will be added here. Please note that as things are being found, reported, and fixed at a colossal rate, this page will frequently be outdated. To see all currently unfixed issues in the github repository, please see this search.</p>"},{"location":"info/known-faults/#error-updating-from-web-ui","title":"Error updating from Web UI","text":"<p>See Update Errors</p>"},{"location":"info/known-faults/#repo-errors","title":"Repo Errors","text":"<p>Using the v4 repo, I get \"missing release file\".  </p> <p>We are currently migrating the repositories. Bear with us, it will be resolved soon\u2122.  </p>"},{"location":"info/known-faults/#error-apt-key-is-deprecated","title":"Error \"apt-key is Deprecated\"","text":"<p>Ubuntu 21.xx and onwards has moved to a new method of signing repositories, where keys are trusted per repository instead of per key. Apt-Key still works, but an updated method for 21.xx has been added to the installation page. You may have to remove the old apt repository in order to update to the new method moving forward.  </p>"},{"location":"info/known-faults/#unauthorized-access-to-indexhtml","title":"Unauthorized access to Index.html","text":"<p>Ombi currently needs access to write and read the Index.html file (<code>ClientApp/dist/index.html</code>), this is to work around a unsupported scenario with Angular. Ombi will write and read that file every time Ombi starts up.</p>"},{"location":"info/known-faults/#systemnethttpcurlhandler","title":"System.Net.Http.CurlHandler","text":"<p>System.TypeInitializationException: The type initializer for 'System.Net.Http.CurlHandler' threw an exception.</p> <p>Run <code>apt install libcurl4-openssl-dev</code></p>"},{"location":"info/notification-template-variables/","title":"Notification Templating","text":"<p>In every notification type, you are able to pass in variables that Ombi will populate with data when sending out the actual message.</p>"},{"location":"info/notification-template-variables/#supported-notification-variables","title":"Supported Notification Variables","text":"Variable Description {UserName} The username of the user {Alias} The Alias of the user (if no alias then it falls back to UserName) {UserPreference} The value of the preference set on the User Management page for that notification agent {RequestedDate} The Date the media was requested {RequestId} The Ombi internal ID for this request {RequestStatus} Current status of the request {Type} The type of the request e.g. Movie, TvShow {Title} The title of the request e.g. Lion King {Overview} Overview of the requested item {AvailableDate} The date the request was made available {Year} The release year of the request {EpisodesList} A comma separated list of Episodes requested {SeasonsList} A comma separated list of seasons requested {PartiallyAvailableEpisodeCount} The amount of episodes that have become available {PartiallyAvailableEpisodesList} A list of episodes that have become available in a format of <code>SxE</code> e.g. 1x1, 1x2, 1x3 for the first three episodes of Season 1. {PosterImage} The requested poster image link {ApplicationName} The Application Name from the Customization Settings {ApplicationUrl} The Application URL from the Customization Settings {IssueDescription} * The description of the issue provided by the user {IssueCategory} * The category that was assigned to the issue {IssueSubject} * The subject of the issue that was provided by the user {NewIssueComment} ** The new comment text on the issue {DenyReason} *** This is the reason text when we deny a request {LongDate} 15 June 2017 {ShortDate} 15/06/2017 {LongTime} 16:02:34 {ShortTime} 16:02 <p>Notes:</p> <p><code>*</code> This is for Issues only <code>**</code>This is only for an issue comment notification, it will be empty for everything else <code>***</code> this is only for requests that have been denied</p>"},{"location":"info/notification-template-variables/#supported-newsletter-variables","title":"Supported Newsletter Variables","text":"<p>A newsletter behaves slightly differently, since there is no request associated with it. These are the allowed variables for a newsletter:  </p> Variable Description {UserName} The User who the email is being sent to {Alias} The User who the email is being sent to {ApplicationName} The Application Name from the Customization Settings {ApplicationUrl} The Application URL from the Customization Settings {LongDate} 15 June 2017 {ShortDate} 15/06/2017 {LongTime} 16:02:34 {ShortTime} 16:02"},{"location":"info/ombi-tautulli/","title":"Syncing Friendly Names","text":"<p>A number of people have now asked if Ombi and Tautulli can synchronise 'friendly names' or 'aliases' for users. At present there is no built-in support for this.  </p>"},{"location":"info/ombi-tautulli/#contributor","title":"Contributor","text":"<p>One of the Discord users (thanks, DirtyCajunRice) wrote a python script to achieve this.  </p>"},{"location":"info/ombi-tautulli/#the-method","title":"The Method","text":"<p>Either copy/paste the contents of The Script into a file (saved somewhere logical) named <code>sync_aliases.py</code>, or download the file. Something simple like the following is preferred:  </p> <ul> <li>Windows: <code>C:\\Scripts\\</code></li> <li>Linux: <code>/opt/scripts/</code></li> </ul> <p>Note: This script requires the requests module to be installed. You can install this with <code>pip install requests</code>. </p> <p>Once the script is in place, you'll need to edit the script to include your urls and API keys (both for Tautulli and Ombi). Then, enter a command prompt/terminal in that folder and run <code>python sync_aliases.py</code> to run the script and have it match entries.  </p> <p>If you'd like to make this sync happen on a schedule, then setting a scheduled task or cron job to run the python script will achieve this. A handy utility for managing this kind of thing is Chronos (or you can create a scheduled task in Windows using Powershell).  </p>"},{"location":"info/ombi-tautulli/#the-script","title":"The Script","text":"<pre><code>from requests import Session\nfrom urllib3 import disable_warnings\nfrom urllib3.exceptions import InsecureRequestWarning\n\nOMBI_URL = ''\nOMBI_APIKEY = ''\n\nTAUTULLI_URL = ''\nTAUTULLI_APIKEY = ''\n\n# Don't Edit Below #\ndisable_warnings(InsecureRequestWarning)\nSESSION = Session()\nSESSION.verify = False\nHEADERS = {'apiKey': OMBI_APIKEY}\nPARAMS = {'apikey': TAUTULLI_APIKEY, 'cmd': 'get_users'}\nTAUTULLI_USERS = SESSION.get('{}/api/v2'.format(TAUTULLI_URL.rstrip('/')), params=PARAMS).json()['response']['data']\nTAUTULLI_MAPPED = {user['username']: user['friendly_name'] for user in TAUTULLI_USERS\n                   if user['user_id'] != 0 and user['friendly_name']}\nOMBI_USERS = SESSION.get('{}/api/v1/Identity/Users'.format(OMBI_URL.rstrip('/')), headers=HEADERS).json()\n\nfor user in OMBI_USERS:\n    if user['userName'] in TAUTULLI_MAPPED and user['alias'] != TAUTULLI_MAPPED[user['userName']]:\n        print(\"{}'s alias in Tautulli ({}) is being updated in Ombi from {}\".format(\n            user['userName'], TAUTULLI_MAPPED[user['userName']], user['alias'] or 'empty'\n        ))\n        user['alias'] = TAUTULLI_MAPPED[user['userName']]\n        put = SESSION.put('{}/api/v1/Identity'.format(OMBI_URL.rstrip('/')), json=user, headers=HEADERS)\n        if put.status_code != 200:\n            print('Error updating {}'.format(user['userName']))\n</code></pre>"},{"location":"info/ombi-tautulli/#scheduling-this-task-with-powershell","title":"Scheduling this task with Powershell","text":"<pre><code>$action = New-ScheduledTaskAction -Execute 'C:\\Python27\\python.exe' -Argument 'C:\\Scripts\\sync_aliases.py'\n$trigger = New-ScheduledTaskTrigger -Daily -At 5am\nRegister-ScheduledTask -Action $action -Trigger $trigger -TaskName \"Sync Friendly Names\" -Description \"Synchronize friendly names between Tautulli and Ombi\" -User \"SYSTEM\"\n</code></pre>"},{"location":"info/request-workflow/","title":"Requests Flow","text":"<p>A brief diagram explaining the flow behind a request.</p> <p></p>"},{"location":"info/reverse-proxy/","title":"Reverse Proxy Examples","text":"<p>Note: These examples assume you are using /ombi as your Base URL. If your Base URL differs, replace all instances of /ombi with /YourBaseURL. If you're using a subdomain (ombi.example.com), replace all instances of /ombi with /, and remove the first location block.</p>"},{"location":"info/reverse-proxy/#why-use-a-reverse-proxy","title":"Why use a reverse proxy?","text":"<p>There are a few reasons to consider using a reverse proxy for providing access to Ombi. These include:  </p> <ul> <li>Providing a nice URL for users to access (instead of <code>http://your.external.ip.address:port</code>).</li> <li>Providing a layer of SSL security for your Ombi users.</li> </ul>"},{"location":"info/reverse-proxy/#ssltls-configuration","title":"SSL/TLS Configuration","text":"<p>When configuring SSL/TLS for your reverse proxy, you may need to provide the fullchain SSL certificate. This is especially important when using certificate providers like Let's Encrypt or ZeroSSL.</p>"},{"location":"info/reverse-proxy/#why-fullchain-ssl-certificates","title":"Why Fullchain SSL Certificates?","text":"<p>Fullchain certificates include both your domain certificate and the intermediate certificates, ensuring that clients can validate the entire chain of trust. Without the fullchain certificate, clients might experience SSL errors, leading to failed connections. Some Android users have reported that using only the domain certificate and not providing the intermediate certificate has caused errors, resulting in \"Wrong Server Version\" messages in the app.</p>"},{"location":"info/reverse-proxy/#using-lets-encrypt-or-zerossl","title":"Using Let's Encrypt or ZeroSSL","text":"<p>If you are using Let's Encrypt or ZeroSSL, the certificate generation process typically provides a fullchain certificate. Ensure that you configure your reverse proxy to use this certificate for proper SSL/TLS setup.</p>"},{"location":"info/reverse-proxy/#a-nice-url","title":"A \"nice URL\"?","text":"<p>By default, the internet uses IP addresses to communicate. A service called DNS provides a way to alias these addresses with nice names (<code>www.example.com</code>, for example), rather than the direct IP address. Think of it like a phonebook for the internet, allowing you to look up a more complicated entry with an easy to remember name. Setting up a reverse proxy allows you to use a nice url like \"your.site.com\", instead of just your external IP address.</p>"},{"location":"info/reverse-proxy/#providing-ssl","title":"Providing SSL","text":"<p>Ombi doesn't do SSL in and of itself. We write a specific tool, for a specific purpose, and we're not going to be able to do SSL better than a dedicated web server software can. As such, we recommend implementing a reverse proxy to handle that side of communication.</p>"},{"location":"info/reverse-proxy/#nginx","title":"Nginx","text":"<p>To use nginx as a reverse proxy requires no extra modules, but it does require configuring.  </p> SubdirectorySubdomain <p>This is an NGINX reverse proxy configuration that DOES use baseurl. This has been tested both from a localhost redirect as well as through a router from a DMZ machine on Ubuntu 18.04.</p> <p>The advantage of this configuration is that it allows for a single certificate to provide ssl services for many different web apps.</p> <p>For example: <code>www.example.com/ombi</code> <code>www.example.com/sonarr</code> <code>www.example.com/radarr</code> </p> <p>You would only need to install/support a certificate for <code>www.example.com</code>.</p> <p>This configuration is if you want to run a subdirectory configuration. Note, Ombi must be started with the <code>--baseurl /ombi</code> option (see here for startup parameters)</p> Location Blockproxy.conf <pre><code>    location /ombi {\n    proxy_pass http://&lt;ip addr or hostname&gt;:5000;\n    include /etc/nginx/proxy.conf;\n    }\n</code></pre> <pre><code>    client_max_body_size 10m;\n    client_body_buffer_size 128k;\n\n    # Timeout if the real server is dead\n    proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;\n\n    # Advanced Proxy Config\n    send_timeout 5m;\n    proxy_read_timeout 240;\n    proxy_send_timeout 240;\n    proxy_connect_timeout 240;\n\n    # Basic Proxy Config\n    proxy_set_header Host $host:$server_port;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-Host $server_name;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto https;\n    proxy_redirect  http://  $scheme://;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    proxy_cache_bypass $cookie_session;\n    proxy_no_cache $cookie_session;\n    proxy_buffers 32 4k;\n    proxy_redirect http://&lt;ip addr or hostname&gt;:5000 https://$host;\n</code></pre> <p>If you wish to use <code>ombi.example.com</code> rather than <code>example.com/ombi</code>, then you need to create a site per service. You will also need to ensure that ombi is not configured to use a BaseURL. Each site has a separate config file in the sites-available directory. By default, this is <code>/etc/nginx/sites-available</code>. We're going to use the site name as the file name, so in this case we need to put the following into <code>/etc/nginx/sites-available/ombi.example.com.conf</code> Note that this example does not enable SSL or generate a certificate, but that can be done afterwards using a tool like Certbot. Certbot will add the <code>listen 443</code>, generate, and apply the certificates using LetsEncrypt. Of course, replace 127.0.0.1:5000 with whatever IP and port combination you are using for Ombi. Ensure your Application Url (in Ombi) matches the <code>server_name</code> field.</p> <pre><code>    # Ombi v4 Subdomain\n    # Replace EXAMPLE.COM with your domain\n    server {\n        listen 80;\n        server_name ombi.*;\n        return 301 https://$server_name$request_uri;\n    }\n    server {\n        listen 443 ssl http2;\n        server_name ombi.*;\n        server_name ombi.EXAMPLE.COM;\n        ssl_certificate /nginx/ssl/EXAMPLE.COM-chain.pem;\n        ssl_certificate_key /nginx/ssl/EXAMPLE.COM-key.pem;\n        ssl_session_cache builtin:1000;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_prefer_server_ciphers on;\n        ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';\n        ssl_session_tickets off;\n        ssl_ecdh_curve secp384r1;\n        resolver 1.1.1.1 1.0.0.1 valid=300s;\n        resolver_timeout 10s;\n        gzip on;\n        gzip_vary on;\n        gzip_min_length 1000;\n        gzip_proxied any;\n        gzip_types text/plain text/css text/xml application/xml text/javascript application/x-javascript image/svg+xml;\n        gzip_disable \"MSIE [1-6]\\.\";\n\n        location / {\n            proxy_pass http://127.0.0.1:5000;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection \"upgrade\";\n        }\n    }\n</code></pre> <p>Once the config file(s) have been created (and saved), we need to enable the site. This is done by symlinking the config file into the sites-enabled directory. The below commands will achieve this (obviously, replace the <code>ombi.example.com</code> sections with whatever names you used for your setup).  </p> LinuxWindows <p><code>ln -s /etc/nginx/sites-available/ombi.example.com.conf /etc/nginx/sites-enabled/ombi.example.com.conf</code> </p> <p><code>mklink C:\\nginx\\conf\\sites-enabled\\ombi.example.com.conf C:\\nginx\\conf\\sites-available\\ombi.example.com.conf</code> </p> <p>We then restart nginx to load the new config file, at which point your system will be listening on http://ombi.example.com for traffic. (If you elect to set up certbot, it will change to https://ombi.example.com).  </p> LinuxWindows <p><code>service nginx restart</code> </p> <p><code>nginx -s reload</code> </p>"},{"location":"info/reverse-proxy/#apache2","title":"Apache2","text":"<p>To run Apache with a reverse proxy setup, you'll need to activate certain modules. The following instructions are for Debian, please adjust commands for each package manager your OS uses. (assume all commands require sudo):  </p> <pre><code>    apt-get install -y libapache2-mod-proxy-html libxml2-dev\n    a2enmod proxy\n    a2enmod proxy_http\n    a2enmod proxy_ajp\n    a2enmod rewrite\n    a2enmod deflate\n    a2enmod headers\n    a2enmod proxy_balancer\n    a2enmod proxy_connect\n    a2enmod proxy_html\n    a2enmod proxy_wstunnel\n</code></pre> <p>In your Virtualhost configuration file you'll need to add a few things. Note: VirtualHost configurations are usually under /etc/apache2/sites-enabled/ </p> <p>Just below the <code>DocumentRoot</code> entry: <code>ProxyPreserveHost On</code> </p> <p>You can then add the configuration for each item you wish to proxy. There are two methods for doing this. One is with a 'Location' section, the other is simply a direct mapping. The mapping goes just before the <code>&lt;/VirtualHost&gt;</code> closing tag, regardless of the method. If you want to run ombi.example.com instead of site.example.com/ombi, then replace <code>/ombi</code> with <code>/</code> and drop the <code>/ombi</code> from the end of the internal addresses, as well as removing the BaseURL from Ombi itself.</p> SubdirectorySubdomain <pre><code>    &lt;Location /ombi&gt;\n    Allow from 0.0.0.0 \n    ProxyPass \"http://ip.of.ombi.host:5000/ombi\" connectiontimeout=5 timeout=30 keepalive=on \n    ProxyPassReverse \"http://ip.of.ombi.host:5000/ombi\" \n    &lt;/Location&gt;\n</code></pre> <pre><code>    ServerName ombi.example.com\n    &lt;Location /&gt;\n        ProxyPass http://ip.of.ombi.host:5000/\n        ProxyPassReverse http://ip.of.ombi.host:5000/\n        Order allow,deny\n        Allow from all\n    &lt;/Location&gt;\n</code></pre> <p>Note: Lets Encrypt Support</p> <p>Add <code>ProxyPass \"/.well-known/\" \"!\"</code> to the configuration file to allow Lets Encrypt to renew the subdomain TLS certificate.</p>"},{"location":"info/reverse-proxy/#apache2-websocket-requests","title":"Apache2 WebSocket requests","text":"<p>While WebSockets are not a requirement for Ombi to work, it does run a lot faster if it is able to use them. WebSocket requests need to be specifically handled when using a reverse proxy. With Apache2, the configuration below needs to be applied in addition to any ProxyPass/ProxyReverse configuration in the <code>&lt;Location&gt;</code> or <code>&lt;VirtualHost&gt;</code> block. This will ensure WebSocket requests are handled correctly through the reverse proxy.</p> SubdirectorySubdomain <pre><code>    RewriteEngine On\n    RewriteCond %{HTTP:Upgrade} =websocket [NC]\n    RewriteRule /ombi/(.*) ws://ip.of.ombi.host:5000/ombi/$1 [P,L]\n</code></pre> <pre><code>RewriteEngine On\nRewriteCond %{HTTP:Upgrade} =websocket [NC]\nRewriteRule (.*) ws://ip.of.ombi.host:5000/$1 [P,L]\n</code></pre> <p>Once you have added this to the virtualhost config for your Ombi proxy (be it subdomain or subdirectory), you'll need to run <code>service apache2 restart</code> to make the changes go live. For Linux distributions using <code>systemd</code>, you can use <code>systemctl restart apache2</code>.</p>"},{"location":"info/reverse-proxy/#iis","title":"IIS","text":"<p>NOTE: There are some extra steps involved with getting IIS to proxy things. Install these two modules:</p> <ul> <li>URL Rewrite</li> <li>Application Request Routing</li> </ul> <p>After installing the above, enable the proxy function via: IIS admin -&gt; Application Request Routing Cache -&gt; Server Proxy Settings, tick \"Enable proxy\"</p> SubdirectorySubdomain <ul> <li>NOTE1:  Below rules assume you have a \"virtual directory\" named \"OMBI\" under your default website in IIS. That VD should target a physical directory that resides at <code>c:\\inetpub\\wwwroot\\ombi</code>. Within this directory you would place the below rules in a web.config file. There should be no other files in this directory. (This should NOT be your OMBI install directory)</li> <li>NOTE2:  Change <code>example.com</code></li> </ul> <pre><code>&lt;configuration&gt;\n    &lt;system.webServer&gt;\n        &lt;defaultDocument&gt;\n            &lt;files&gt;\n            &lt;/files&gt;\n        &lt;/defaultDocument&gt;\n        &lt;rewrite&gt;\n            &lt;rules&gt;\n                &lt;clear /&gt;\n                &lt;rule name=\"ReverseProxyInboundOMBI\" stopProcessing=\"true\"&gt;\n                    &lt;match url=\"(.*)\" /&gt;\n                    &lt;action type=\"Rewrite\" url=\"http://localhost:5000/ombi/{R:1}\" /&gt;\n                    &lt;serverVariables&gt;\n                        &lt;set name=\"host\" value=\"$host\" /&gt;\n                        &lt;set name=\"HTTP_X_FORWARDED_HOST\" value=\"$server_name\" /&gt;\n                        &lt;set name=\"HTTP_X_REAL_IP\" value=\"$remote_addr\" /&gt;\n                        &lt;set name=\"HTTP_X_FORWARDED_FOR\" value=\"$proxy_add_x_forwarded_for\" /&gt;\n                        &lt;set name=\"HTTP_X_FORWARDED_PROTO\" value=\"$scheme\" /&gt;\n                        &lt;set name=\"HTTP_X_FORWARDED_SSL\" value=\"on\" /&gt;\n                    &lt;/serverVariables&gt;\n                    &lt;conditions trackAllCaptures=\"true\"&gt;\n                    &lt;/conditions&gt;\n                &lt;/rule&gt;\n            &lt;/rules&gt;\n            &lt;outboundRules&gt;\n                &lt;clear /&gt;\n                &lt;rule name=\"Restore Encoding\" preCondition=\"Restore HTTP_ACCEPT_ENCODING}\" enabled=\"true\"&gt;\n                    &lt;match serverVariable=\"HTTP_ACCEPT_ENCODING\" pattern=\"^(.+)\" /&gt;\n                    &lt;conditions logicalGrouping=\"MatchAll\" trackAllCaptures=\"true\" /&gt;\n                    &lt;action type=\"Rewrite\" value=\"{HTTP_X_ORIGINAL_ACCEPT_ENCODING}\" /&gt;\n                &lt;/rule&gt;\n                &lt;rule name=\"ReverseProxyOutboundOMBI\" preCondition=\"ResponseIsHtml1\" enabled=\"true\" stopProcessing=\"false\"&gt;\n                    &lt;match filterByTags=\"A, Area, Base, Form, Frame, Head, IFrame, Img, Input, Link, Script\" pattern=\"^http(s)?://localhost:5000/ombi/(.*)\" /&gt;\n                    &lt;conditions logicalGrouping=\"MatchAll\" trackAllCaptures=\"true\"&gt;\n                        &lt;add input=\"{HTTP_REFERER}\" pattern=\"/ombi\" /&gt;\n                    &lt;/conditions&gt;\n                    &lt;action type=\"Rewrite\" value=\"http{R:1}://example.com/ombi/{R:2}\" /&gt;\n                &lt;/rule&gt;\n        &lt;preConditions&gt;\n            &lt;preCondition name=\"ResponseIsHtml1\"&gt;\n                &lt;add input=\"{RESPONSE_CONTENT_TYPE}\" pattern=\"^text/html\" /&gt;\n            &lt;/preCondition&gt;\n            &lt;preCondition name=\"Restore HTTP_ACCEPT_ENCODING}\"&gt;\n                &lt;add input=\"{RESPONSE_CONTENT_TYPE}\" pattern=\".+\" /&gt;\n            &lt;/preCondition&gt;\n        &lt;/preConditions&gt;\n            &lt;/outboundRules&gt;\n        &lt;/rewrite&gt;\n        &lt;security&gt;\n            &lt;authentication&gt;\n            &lt;/authentication&gt;\n        &lt;/security&gt;\n        &lt;urlCompression doStaticCompression=\"true\" doDynamicCompression=\"false\" /&gt;\n    &lt;/system.webServer&gt;\n&lt;/configuration&gt;\n</code></pre> <ul> <li> <p>NOTE 1:  Below rules assume you have a dedicated site to run Ombi under in IIS. The address for this needs to match your application URL in Ombi, and should target a physical directory that resides at c:\\inetpub\\ombi. Within this directory you would place the below rules in a web.config file. There should be no other files in this directory. (This should NOT be your OMBI install directory)</p> </li> <li> <p>NOTE 2: Change \"ombi_ip:port\" to whatever your local address for Ombi is.</p> </li> <li>NOTE 3: Be sure you set your application URL in Ombi to whatever your site in IIS is listening to.</li> </ul> <pre><code>&lt;configuration&gt;\n    &lt;system.webServer&gt;\n        &lt;rewrite&gt;\n            &lt;rules&gt;\n                &lt;rule name=\"HTTP to HTTPS redirect\" stopProcessing=\"true\" enabled=\"false\"&gt;\n                    &lt;match url=\"(.*)\" /&gt;\n                    &lt;conditions&gt;\n                        &lt;add input=\"{HTTPS}\" pattern=\"off\" ignoreCase=\"true\" /&gt;\n                    &lt;/conditions&gt;\n                    &lt;action type=\"Redirect\" redirectType=\"Found\" url=\"https://{HTTP_HOST}/{R:1}\" /&gt;\n                &lt;/rule&gt;\n\n                &lt;rule name=\"RP_Ombi\" enabled=\"true\" stopProcessing=\"true\"&gt;\n                    &lt;match url=\"(.*)\" /&gt;\n                    &lt;action type=\"Rewrite\" url=\"http://ombi_ip:port/{R:1}\" /&gt;\n                    &lt;serverVariables&gt;\n                    &lt;/serverVariables&gt;\n                &lt;/rule&gt;\n            &lt;/rules&gt;\n            &lt;outboundRules&gt;\n                &lt;clear /&gt;\n                &lt;preConditions&gt;\n                    &lt;preCondition name=\"Restore HTTP_ACCEPT_ENCODING}\"&gt;\n                        &lt;add input=\"{RESPONSE_CONTENT_TYPE}\" pattern=\".+\" /&gt;\n                    &lt;/preCondition&gt;\n                &lt;/preConditions&gt;\n            &lt;/outboundRules&gt;\n        &lt;/rewrite&gt;\n    &lt;/system.webServer&gt;\n&lt;/configuration&gt; \n</code></pre>"},{"location":"info/reverse-proxy/#caddy","title":"Caddy","text":"<p>Caddy 2 is a powerful, enterprise-ready, open source web server with automatic HTTPS written in Go. You can find Caddy here, and their docs can be found here. An official docker image can be found here. Otherwise you can direct install using a binary found here.</p> <p>Note: The official binaries and Docker image do not include any of the DNS plugins required for wildcard certificates or DNS verification instead of port 80 verification. If your connection blocks port 80, you will need to build your own binary or image to include these.</p> SubdirectorySubdomain <pre><code>domain.example.com {\n    route /ombi* {\n        reverse_proxy 127.0.0.1:5000\n    }\n}\n</code></pre> <pre><code>ombi.example.com {\n    reverse_proxy 127.0.0.1:5000\n}\n</code></pre>"},{"location":"info/reverse-proxy/#traefik","title":"Traefik","text":"<p>Traefik is the a great reverse proxy option if you are using a container-based setup such as docker compose. You can find Traefik here, and their getting started guide here. For more information and examples on the usage of labels in docker compose (specific to traefik) go here. Note: The following configuration examples only apply to traefik version 2 and later. Note 2: All examples contain additional labels not necessarily required for your setup such as wildcard SSL certificates via Let's Encrypt and SSL related headers.</p> <p>Adjust the values of <code>traefik.docker.network=traefik_proxy</code>, <code>traefik.http.routers.ombi.entrypoints=https</code> and <code>traefik.http.routers.ombi.rule=Host(`ombi.example.com`)</code> to match your specific setup.</p> SubdirectorySubdomainSubdomain and Subdirectory <p>The following configuration would make Ombi available at <code>https://example.com/ombi</code>. Note: When using a subdirectory it is essential to use <code>PathPrefix</code> instead of <code>Path</code>. More information here, specifically <code>Path Vs PathPrefix</code>.</p> <pre><code>    labels:\n    - traefik.enable=true\n    - traefik.http.services.ombi.loadbalancer.server.port=3579\n    - traefik.docker.network=traefik_proxy\n    - traefik.http.routers.ombi.rule=PathPrefix(`/ombi`)\n    - traefik.http.routers.ombi.entrypoints=https\n    - traefik.http.routers.ombi.tls.certresolver=letsencrypt\n    - traefik.http.routers.ombi.tls.domains[0].main=*.example.com\n    - traefik.http.routers.ombi.tls.domains[0].sans=example.com\n    - traefik.http.middlewares.ombi.headers.SSLRedirect=true\n    - traefik.http.middlewares.ombi.headers.STSSeconds=315360000\n    - traefik.http.middlewares.ombi.headers.browserXSSFilter=true\n    - traefik.http.middlewares.ombi.headers.contentTypeNosniff=true\n    - traefik.http.middlewares.ombi.headers.forceSTSHeader=true\n    - traefik.http.middlewares.ombi.headers.SSLHost=\n    - traefik.http.middlewares.ombi.headers.STSIncludeSubdomains=true\n    - traefik.http.middlewares.ombi.headers.STSPreload=true\n    - traefik.http.middlewares.ombi.headers.frameDeny=true\n</code></pre> <p>The following configuration would make Ombi available at https://ombi.example.com.  </p> <pre><code>    labels:\n    - traefik.enable=true\n    - traefik.http.services.ombi.loadbalancer.server.port=3579\n    - traefik.docker.network=traefik_proxy\n    - traefik.http.routers.ombi.rule=Host(`ombi.example.com`)\n    - traefik.http.routers.ombi.entrypoints=https\n    - traefik.http.routers.ombi.tls.certresolver=letsencrypt\n    - traefik.http.routers.ombi.tls.domains[0].main=*.example.com\n    - traefik.http.routers.ombi.tls.domains[0].sans=example.com\n    - traefik.http.middlewares.ombi.headers.SSLRedirect=true\n    - traefik.http.middlewares.ombi.headers.STSSeconds=315360000\n    - traefik.http.middlewares.ombi.headers.browserXSSFilter=true\n    - traefik.http.middlewares.ombi.headers.contentTypeNosniff=true\n    - traefik.http.middlewares.ombi.headers.forceSTSHeader=true\n    - traefik.http.middlewares.ombi.headers.SSLHost=\n    - traefik.http.middlewares.ombi.headers.STSIncludeSubdomains=true\n    - traefik.http.middlewares.ombi.headers.STSPreload=true\n    - traefik.http.middlewares.ombi.headers.frameDeny=true\n</code></pre> <p>The following configuration would make Ombi available at https://media.example.com/request. Note: When using a subdirectory it is essential to use <code>PathPrefix</code> instead of <code>Path</code>. More information here, specifically <code>Path Vs PathPrefix</code>.</p> <pre><code>    labels:\n    - traefik.enable=true\n    - traefik.http.services.ombi.loadbalancer.server.port=3579\n    - traefik.docker.network=traefik_proxy\n    - traefik.http.routers.ombi.rule=Host(`media.example.com`) &amp;&amp; PathPrefix(`/request`)\n    - traefik.http.routers.ombi.entrypoints=https\n    - traefik.http.routers.ombi.tls.certresolver=letsencrypt\n    - traefik.http.routers.ombi.tls.domains[0].main=*.example.com\n    - traefik.http.routers.ombi.tls.domains[0].sans=example.com\n    - traefik.http.middlewares.ombi.headers.SSLRedirect=true\n    - traefik.http.middlewares.ombi.headers.STSSeconds=315360000\n    - traefik.http.middlewares.ombi.headers.browserXSSFilter=true\n    - traefik.http.middlewares.ombi.headers.contentTypeNosniff=true\n    - traefik.http.middlewares.ombi.headers.forceSTSHeader=true\n    - traefik.http.middlewares.ombi.headers.SSLHost=\n    - traefik.http.middlewares.ombi.headers.STSIncludeSubdomains=true\n    - traefik.http.middlewares.ombi.headers.STSPreload=true\n    - traefik.http.middlewares.ombi.headers.frameDeny=true\n</code></pre>"},{"location":"info/reverse-proxy/#v3-specific","title":"V3 Specific","text":"<p>The notes regarding Ye Olde V3 Proxy can be found in the archive. Note: please don't run V3 any more. If you have somehow managed to get V3 from somewhere, replace it with V4.</p>"},{"location":"info/roles-and-notifications/","title":"Roles and notifications","text":"<p>Certain roles automatically disable some notifications for that user. If notifications are not working but the 'Test Notification' does, check the roles they're assigned.</p> <p>Some Roles do not trigger some notifications:</p> <ul> <li> <p>'Admin' will NOT trigger \"New Request\" notification. (because you know you made the request)</p> </li> <li> <p>'API' will trigger the \"New Request\" notification.</p> </li> <li> <p>'PowerUser' will trigger the \"New Request\" notification.</p> </li> <li> <p>normal users will trigger the \"New Request\" notification. (There is no role for normal user as long as they exist and do not have Admin or Power User role they are a normal user)</p> </li> </ul>"},{"location":"info/roles-and-notifications/#notifications","title":"Notifications","text":"<ul> <li>ISSUE</li> <li>ISSUE COMMENT</li> <li>ISSUE RESOLVED</li> <li>ITEM ADDED TO FAULT QUEUE</li> <li>NEW REQUEST</li> <li>REQUEST APPROVED</li> <li>REQUEST AVAILABLE</li> <li>REQUEST DECLINED</li> <li>WELCOME EMAIL (does nothing for any Agent except email)</li> </ul> <p>See here for more information on roles.</p>"},{"location":"info/startup-parameters/","title":"Startup Parameters","text":"<p>Certain parameters (or arguments) can be passed to the ombi application to enforce specific settings. The available options are the same across all platforms (Mac, Windows, Linux etc), but in some instances actually using them differs. This page is intended to help with some rough information on how to use them on different platforms. To jump to how they're used, click here.  </p>"},{"location":"info/startup-parameters/#parameters","title":"Parameters","text":"<p>Below you'll find each available parameter, and what they do. Each parameter should be entered in lower case with a <code>--</code> before the name of it, i.e. <code>--baseurl</code> or <code>--storage</code>. Multiple parameters can be passed at once, and should be separated with a space, i.e. <code>--baseurl /ombi --storage /opt/ombi</code></p> HostStorageBaseurlDemoMigrateHelpVersion <p>This should be a semicolon-separated (;) list of URL prefixes to which the server should respond. For example, <code>--host http://localhost:123;http://ip.of.ombi.host:123</code>. Use \"*\" to indicate that the server should listen for requests on any IP held by the system it's installed on using the specified port and protocol. For example, <code>--host http://*:5000</code> would listen on localhost, the machine IPv4 address, and the IPv6 address. The protocol (http://) must be included with each URL. Note: this must be <code>http://</code>, as Ombi itself does not handle the \"s\" part. For that, you need a proxy. Default = <code>http://*:5000</code></p> <p>Storage path, where we save the logs and database. The default for this differs slightly by OS. On Windows, this is the application directory. On Linux, this is <code>/opt/ombi</code>.  </p> <p>The base URL for reverse proxy scenarios. See reverse proxying for more info. Note that this MUST begin with a \"/\" character (i.e. <code>/ombi</code>, not <code>ombi</code>).</p> <p>Demo mode. You will never need to use this, and we don't like that fruit company...</p> <p>Will run any database migrations that have not been run on your database and then exit the application.  </p> <p>Display a help screen listing these startup options.</p> <p>Display version information.</p>"},{"location":"info/startup-parameters/#usage","title":"Usage","text":"<p>This is not an exhaustive or comprehensive guide, but should provide a rough idea for using parameters on the different platforms Ombi works on.</p>"},{"location":"info/startup-parameters/#windows","title":"Windows","text":"<p>This varies depending on whether you run it manually, via task scheduler, or via nssm as a service.</p> Manual runScheduled taskNSSM <ul> <li>When launching Ombi by simply double-clicking the file, you cannot pass in any startup parameters.</li> <li>If you are using CMD (or another terminal, like PowerShell) to launch Ombi, simply add the parameter after the filename for Ombi, as shown below.</li> <li>If you are using a script to launch ombi, or a shortcut, add the parameters after the path to the Ombi file is called.</li> </ul> <p> </p> <p>Parameters on a scheduled task go into the \"action\" for the task, under <code>Add Arguments (optional)</code>.  </p> <p></p> <p>When installing Ombi via nssm, or switching to a baseurl from an existing install, you will need to edit your service to include the parameters. With nssm, this can be done during install (<code>nssm install ombi</code>) or after initial install (<code>nssm edit ombi</code>). Parameters should be put into the \"arguments\" field in nssm, as shown below.  </p> <p> </p>"},{"location":"info/startup-parameters/#mac","title":"Mac","text":"Manual runAutorun <ul> <li>When launching Ombi by simply double-clicking the file, you cannot pass in any startup parameters.</li> <li>If you are using Terminal to launch Ombi, simply add the parameter after the filename for Ombi, the same as for Windows (above).</li> <li>If you are using a script to launch ombi, or a shortcut, add the parameters after the path to the Ombi file is called.</li> </ul> <ul> <li>If you use the autostart method to run Ombi, then you'll have to add the startup parameters to the initial command.  </li> <li>Example (assuming you have Ombi located in <code>/opt/Ombi</code>): <code>/opt/Ombi/Ombi --baseurl /ombi RunAtLoad WorkingDirectory /opt/Ombi</code></li> </ul>"},{"location":"info/startup-parameters/#linux","title":"Linux","text":"<p>This one has a lot of variety involved, so a few common options will be broken down here. For most 'nix variants, Ombi will run as a service (especially when installed via the apt repo), so the service file itself will need editing to include the parameters to be used at launch each time.</p> Apt Repo <p>You'll need to edit the ombi service file, usually located at <code>/lib/systemd/system/ombi.service</code>. Edit the line that reads <code>ExecStart=/opt/Ombi/Ombi --storage /etc/Ombi/</code>, and add whatever startup parameters you need, separated by spaces. Restart the ombi service to apply any changes (<code>sudo service ombi restart</code>).</p> <p>For a baseurl, add <code>--baseurl /ombi</code> to the end (or your preferred baseurl). The resulting line should look similar to this: <code>ExecStart=/opt/Ombi/Ombi --storage /etc/Ombi/ --baseurl /ombi</code>.  </p> <p>To run on a different port, use the <code>--host</code> parameter. The below would run Ombi on port 3579.  <code>ExecStart=/opt/Ombi/Ombi --storage /etc/Ombi/ --host http://*:3579</code>.</p> <p>Again, multiple parameters should be separated by spaces. <code>ExecStart=/opt/Ombi/Ombi --storage /etc/Ombi/ --host http://*:3579 --baseurl /ombi</code>.</p>"},{"location":"info/startup-parameters/#docker","title":"Docker","text":"<p>This varies depending on the package maintainer (i.e. hotio or linuxserver). Generally, the parameters can be passed in as ENV variables - however this should be confirmed with the package maintainer directly.</p>"},{"location":"info/user-roles/","title":"User Roles","text":"<p>Here is an explanation of what the roles mean and what permissions they give. Note: Changing user roles requires them to log out and in again before they are applied. </p> <ul> <li>Power User This role has the ability to manage users and manage requests. It does not have access to any settings. They will also receive the pop-up for requesting on behalf of another user when making a request.</li> <li>Auto Approve Movie Auto approves all movie requests for this user.</li> <li>Manage Own Requests This will allow the user to delete their own requests. Should be used in conjunction with the \"Hide Requests from other users\" setting.</li> <li>Request 4k Movie Gives the ability for the user to request movies in 4k (only applies if Movie4KRequests is enabled in features).</li> <li>Request Music User can request music.</li> <li>Request Tv Gives the ability for the user to request TV Shows, Seasons and Episodes.</li> <li>Disabled If a user has this role they can no longer log in. Because they've been disabled.</li> <li>Receives Newsletter Users with this role will receive the Ombi Newsletter (if you have it active).</li> <li>Request Movie Gives the ability for the user to request movies.</li> <li>Admin This is the role that gives the power to do everything! An admin user will  have full access to all users, manage requests and the ability to view and change any settings. They will also receive the pop-up for requesting on behalf of another user when making a request.</li> <li>Auto Approve 4k Movie Auto approves all 4k movie requests for this user.</li> <li>Auto Approve TV Auto approves all Tv Show, Season and Episode requests for this user.</li> <li>Auto Approve Music Users music requests will be automatically approved and sent to Lidarr.</li> <li>Custom Page This allows the user to edit the custom page (if enabled)</li> </ul>"},{"location":"settings/about/","title":"About","text":"<p>The about page provides information about your particular instance of Ombi. Logically.  </p>"},{"location":"settings/about/#coming-soon","title":"Coming Soon","text":""},{"location":"settings/all-the-arrs/","title":"All the Arrs","text":"<p>Under Settings -&gt; Movies / TV / Music, you'll find the configuration sections for each of the following:  </p> <ul> <li>Sonarr</li> <li>Radarr</li> <li>Lidarr</li> </ul> <p>Each one does a different thing, but they're all based on the same codebase - so their configurations are similar. As an example address, assume we use a service behind a reverse proxy, with each service being accessible at the following addresses: Sonarr: <code>https://app.example.com/sonarr</code> Lidarr: <code>https://app.example.com/lidarr</code> Radarr: <code>https://app.example.com/radarr</code> </p>"},{"location":"settings/all-the-arrs/#configuring-connections","title":"Configuring Connections","text":"<p>There are a number of options that the *arr suites use. These are almost all required for it to work. They should be filled in in the following order:  </p> <ol> <li>Enable. Toggle this to \"on\".</li> <li>Hostname/IP The IP address or hostname your Sonarr/Radarr/Lidarr is running on.</li> <li>Port Whatever port your instance is on. If you're behind an SSL proxy, this is likely <code>443</code>, and <code>SSL</code> should be enabled.</li> <li>SSL Unless you have SSL enabled in your *arr, leave this off.</li> <li>API Key Whatever your API key is for whichever particular *arr you're trying to configure. This varies from site to site, we don't know what your API key is.</li> <li>Base URL Mostly only relevant if you've got a reverse proxy in play and have subdirectory proxies (i.e. <code>domain.example.com/sonarr</code> would have a baseurl of <code>sonarr</code>).</li> <li>Qualities/Profiles You will need to hit the button to load these from your *arr, and select what quality profile you want requests from Ombi to use in the dropdowns once they've been retrieved. Admins get a prompt to override these when making requests, and they can have different ones set per-user if you so choose. Here is where the default selection is.</li> <li>Folders/Root Folders These also need to be loaded from the relevant *arr. Hit the button, then once they've been retrieved you'll need to select them from the relevant dropdowns. Admins get a prompt to override these when making requests, and they can have different ones set per-user if you so choose. Here is where the default selection is.</li> <li>Tags (optional) This allows you to define a tag to be attached to anything added to *arr for quick identification in their lists.</li> <li>Sonarr<ol> <li>Languages This is mostly to account for things like Anime vs TV, but it does need setting. Load them with the button, select from the dropdown.</li> <li>Enable Season Folders (Sonarr) This is just for Sonarr, and we recommend this being \"On\" for keeping files organised nicely.</li> </ol> </li> <li>Radarr<ol> <li>Minimum Availability Defines when your Radarr should look for this particular item. Setting this correctly can help reduce the chances of fakes and bad copies.</li> </ol> </li> <li>Lidarr<ol> <li>Album Folder Tells Lidarr to use individual folders for albums. This helps keep folders tidy.</li> </ol> </li> <li>Submit Hit the button to save settings. If at any point one of the \"Load\" buttons didn't work, use the \"Test Connectivity\" button to see what message you get - it helps to confirm if the *arr is not responding at all, or is not authenticating (bad host/port vs bad API key).</li> </ol>"},{"location":"settings/all-the-arrs/#specific-settings","title":"Specific Settings","text":"<p>Below here are details for each setting specifically. The above should get your going - the below is for troubleshooting or advanced configs. Coming soon to the docs: configuring multiple instances of Radarr.</p>"},{"location":"settings/all-the-arrs/#enabled","title":"Enabled","text":"<p>This switch tells Ombi whether to use this service or not. Don't run the service? Don't enable it.  </p>"},{"location":"settings/all-the-arrs/#scan-for-availability","title":"Scan for Availability","text":"<p>This option tells Ombi to use the Arrs to check for availability (instead of a media server). If you have set up a Plex/Emby/Jellyfin connection in Ombi, then Ombi will use that to detect what is available (and this should be disabled). We recommend using the media server rather than this option - it's mainly for people who use things like XBMC and local players.</p>"},{"location":"settings/all-the-arrs/#add-the-user-as-a-tag","title":"Add the user as a tag","text":"<p>This will add the username as a tag to requested content in the relevant *arr, allowing you to find them easily.</p>"},{"location":"settings/all-the-arrs/#hostname","title":"Hostname","text":"<p>This is the address you use to connect to the service. If it's running on the same machine as Ombi, localhost usually works. If you're running the services (and Ombi itself) in docker containers, you could use the container IP. If the services are on multiple machines, IP addresses tend to be useful here. If, however, you use the service behind a reverse proxy, then the 'hostname' field is the bit from before the 'baseurl'. In the examples above, this would be <code>app.example.com</code>.</p>"},{"location":"settings/all-the-arrs/#port","title":"Port","text":"<p>If you're not using a reverse proxy, this is whatever port you use to access the service (it's the number after the second \":\" in the address bar). In the case of Sonarr, the default is <code>8989</code>. If you're using a reverse proxy without* SSL, the port will be <code>80</code> (pro-tip: don't do that). If you're running _with SSL, the port will be <code>443</code>.  </p>"},{"location":"settings/all-the-arrs/#ssl","title":"SSL","text":"<p>If you're running a reverse proxy with SSL, and are going through that address rather than the direct internal address, this needs to be enabled. Otherwise, leave it off.</p>"},{"location":"settings/all-the-arrs/#api-key","title":"API key","text":"<p>This is the API key for each relevant service. You can get this by looking under <code>Settings -&gt; General</code> in each one.</p>"},{"location":"settings/all-the-arrs/#base-url","title":"Base URL","text":"<p>If you use a reverse proxy and have a baseurl configured in any of the services, you'll need to fill this in. This tends to be the thing you put in after the hostname to access the service - in the example above for Lidarr, this field would need to have <code>/lidarr</code> added to it.</p>"},{"location":"settings/all-the-arrs/#quality-profiles","title":"Quality Profiles","text":"<p>Depending on the service, you may have this appear several times. There will be a button to 'get' these from the service. Click it, wait, and select one. If it doesn't work, save the settings and \"Test Connectivity\". You may not be able to communicate with the service yet.</p>"},{"location":"settings/all-the-arrs/#root-folders","title":"Root Folders","text":"<p>Depending on the service, you may have this appear several times. There will be a button to 'get' these from the service. Click it, wait, and select one. If it doesn't work, save the settings and \"Test Connectivity\". You may not be able to communicate with the service yet.</p>"},{"location":"settings/all-the-arrs/#tag","title":"Tag","text":"<p>This allows you to define a tag to be attached to anything added to *arr for quick identification in their lists. In some instances Ombi will refuse to let you save settings without something in this field. We suggest opening the relevant Arr and tagging something with a default option (like 'request') to be able to use.</p>"},{"location":"settings/all-the-arrs/#submit","title":"Submit","text":"<p>This button is used to save and activate your new settings. This will not work if you have not filled in every option for the relevant service (folders, qualities, languages, seasons, albums, availability, tag).  </p>"},{"location":"settings/all-the-arrs/#sonarr-radarr","title":"Sonarr / Radarr","text":""},{"location":"settings/all-the-arrs/#default-minimum-availability","title":"Default Minimum Availability","text":"<p>This tells Ombi what it should add movies to Radarr as - should it wait until they're available on disc to look for them, in theatres, announced...? To try to avoid picking up fakes, <code>Physical / Web</code> is your best option.</p>"},{"location":"settings/all-the-arrs/#language-profile","title":"Language Profile","text":"<p>There will be a button to 'get' these from the service. Click it, wait, and select one. If it doesn't work, save the settings and \"Test Connectivity\". You may not be able to communicate with the service yet.</p>"},{"location":"settings/all-the-arrs/#default-root-folders","title":"Default Root Folders","text":"<p>When setting up Sonarr/Radarr in Ombi, the option to \"Load Folders\" allows you to define what 'root folder' requested content should be put into by the relevant arr. If you are using 'atomic' mapping (i.e. direct media location in a containerised arr), you will still need to define a root folder in it in order for you to be able to use Ombi. Note, in some older versions of Sonarr this was not an issue as it would supply a default location if the API was queried, but this behaviour seems to have been removed.</p>"},{"location":"settings/all-the-arrs/#lidarr-specific","title":"Lidarr Specific","text":""},{"location":"settings/all-the-arrs/#metadata-profile","title":"Metadata Profile","text":"<p>Lidarr uses these to say what it should pull in by an artist (compilations, mixtapes, albums, singles...). Again, 'get' the options from the service and select one.</p>"},{"location":"settings/all-the-arrs/#album-folder","title":"Album Folder","text":"<p>This tells Ombi that Lidarr wants things organised into individual subfolders per album. Usually, this should be ticked.</p>"},{"location":"settings/all-the-arrs/#radarr-specific","title":"Radarr Specific","text":""},{"location":"settings/all-the-arrs/#radarr-4k","title":"Radarr 4K","text":"<p>This option only appears when  Movie4KRequests is turned on. </p> <p>This is where you configure a second (additional) copy of Radarr for Ombi to send requests to, with its own root paths and quality profiles. This is designed for people to be able to request a movie in multiple resolutions at once (usually SD or HD along with 4K), but could be set up to do SD and HD or any combination you want. Note that Ombi is unaware of the resolution of the item in Plex/Emby/Jellyfin - it uses the media ID for matching to see if it's available. As a result, if someone requests 4K and HD, Ombi will say the content is available when either resolution is available, not both.</p>"},{"location":"settings/all-the-arrs/#sonarr-specific","title":"Sonarr Specific","text":""},{"location":"settings/all-the-arrs/#enable-season-folders","title":"Enable Season Folders","text":"<p>This tells Ombi that Sonarr wants things organised into Season subfolders. Usually, this should be ticked.</p>"},{"location":"settings/all-the-arrs/#v3","title":"V3","text":"<p>If you still have this option, update your Ombi instance. Sonarr made V3 their \"stable\" branch a while ago, and we now use the V3 API by default (in preparation for the V4 API).</p>"},{"location":"settings/all-the-arrs/#advanced","title":"Advanced","text":"<p>Any setting behind advanced is not recommended to be altered, unless you know what you are doing.</p>"},{"location":"settings/all-the-arrs/#do-not-search","title":"Do not search","text":"<p>When a movie/series/album gets requested and approved, it will be added as unmonitored to the Arrs. This means it will not auto download.</p>"},{"location":"settings/authentication/","title":"Authentication Settings","text":""},{"location":"settings/authentication/#allow-users-to-login-without-a-password","title":"Allow users to login without a password","text":"<p>This does exactly what it says on the tin. It will allow a user to login with their username, and only their username. The user must still exist in Ombi. If the user has PowerUser or Admin permissions then they also require a password</p>"},{"location":"settings/authentication/#enable-plex-oauth","title":"Enable Plex OAuth","text":"<p>This allows the user to login using their Plex account. A new popup will appear going to Plex.tv asking them to login. Once logged in they will then be able to access Ombi.</p>"},{"location":"settings/authentication/#enable-authentication-with-header-variable","title":"Enable Authentication with Header Variable","text":"<p>This option allows the user to select a HTTP header value that contains the desired login username. </p> <p>Note that if the header value is present and matches an existing user, default authentication is bypassed - use with caution.  </p> <p>This is most commonly utilized when Ombi is behind a reverse proxy which handles authentication. For example, if using Authentik, the <code>X-authentik-username</code> HTTP header which contains the logged in user's username is set by Authentik's proxy outpost.</p>"},{"location":"settings/authentication/#sso-creates-new-users-automatically","title":"SSO creates new users automatically","text":"<p>By default, header authentication will fail if the user doesn't already exist. If this option is enabled, new users will instead be created automatically.</p> <p>The default roles, request limits and streaming country set in User Management will be applied to the new user.</p>"},{"location":"settings/cloudmobile/","title":"Mobile","text":"<p>See Mobile</p>"},{"location":"settings/couchpotato/","title":"Couchpotato","text":""},{"location":"settings/couchpotato/#coming-soon","title":"Coming Soon","text":""},{"location":"settings/customization/","title":"Customization Settings","text":""},{"location":"settings/customization/#application-name","title":"Application Name","text":"<p>This will replace most references to the word <code>Ombi</code> with a new name. This includes in notifications and on the website (need to refresh the browser to see the change).  </p>"},{"location":"settings/customization/#application-url","title":"Application Url","text":"<p>This is for any external links Ombi sends out (this link should be the externally accessible URL) through any of the notification methods. e.g. Password reset email - we use the Application URL to take them to a page where they can reset their password. This is also used to generate the QR code for mobile app connections. It should look like a full web address, complete with what connection type needs to be used - <code>http://</code> or <code>https://</code>. If you're not using a reverse proxy, it should also include the port needed near the end (for example, <code>:5000</code>).  </p>"},{"location":"settings/customization/#application-url-format","title":"Application URL Format","text":"Reverse proxy with SSLReverse proxy without SSLNaked <p>With a subdomain: <code>https://ombi.example.com</code> With a baseurl: <code>https://site.example.com/ombi</code> This would be if you have Ombi configured behind a reverse proxy, with SSL enabled.</p> <p>With a subdomain: <code>http://ombi.example.com</code> With a baseurl: <code>http://site.example.com/ombi</code> This would be if you have Ombi configured behind a reverse proxy, with SSL enabled. This is not recommended. If you have a reverse proxy in play, put SSL on it with something like Let'sEncrypt.</p> <p><code>http://ombi.example.com:5000</code> We REALLY do not recommend this option. While we endeavour to make the application itself as secure as possible, leaving traffic to go in and out of your network unencrypted is not a good thing to do, nor is simply punching a hole in your firewall through a forwarded port.</p>"},{"location":"settings/customization/#custom-logo","title":"Custom Logo","text":"<p>This is used for the Login Page, Landing Page and also any notifications that we send a logo e.g. Email Notifications.</p> <p>Format: <code>http://url.to.picture/</code></p>"},{"location":"settings/customization/#custom-favicon","title":"Custom Favicon","text":"<p>This will default to the Ombi logo, but you can have your own favicon load if you wish to. This should point to an externally accessible URL.  </p>"},{"location":"settings/customization/#hide-available-content-on-the-discover-page","title":"Hide Available Content on the Discover Page","text":"<p>Does what it says on the tin. Anything that you have in your media server(s) already (that Ombi is aware of) will be hidden from the discover page.</p>"},{"location":"settings/customization/#custom-donation","title":"Custom Donation","text":"<p>We have the ability to set a custom donation url and message, this will be displayed to all users unlike the ombi donation message.</p>"},{"location":"settings/customization/#use-custom-page","title":"Use Custom Page","text":"<p>This allows you to add a blank page to the Nav bar that you are able to fully customise the HTML with a WYSIWYG editor. Once you enable this setting, just refresh the page and you will see the new option in the navigation bar, from there you can edit your page.  </p> <p>Note: You must add the Edit Custom Page Role to your user account before you are able to edit the Custom Page. This can be done via the <code>User Management</code> page.  </p> <p>Disclaimer: The Custom Page is public and can be accessed without authorization, there are plans to add an authorization toggle to this page. Use the custom page with caution.  </p>"},{"location":"settings/customization/#custom-css","title":"Custom CSS","text":"<p>There are two ways we officially support custom CSS. They are by import or direct entry. For some ideas, you can find some common customisations under Common Themes Any CSS you wish to use should be put into the Custom CSS box. It could be a reference to a CSS file (via an import reference) or could be raw CSS itself.</p> <p>Note: For CSS import to work, it requires a MIME type of <code>text/css</code> or the browser will not load it as a stylesheet.  </p>"},{"location":"settings/customization/#landinglogin-page-backgrounds","title":"Landing/Login Page Backgrounds","text":"<p>We do have the ability to change what backgrounds are used on the landing and login pages.</p> <p>This is not done via the Ombi UI, but done in the <code>appsettings.json</code> file in the Ombi directory Example. If you look at that file you can see the following sections:</p> <pre><code>\"LandingPageBackground\": {\n    \"Movies\": [\n      278,\n      244786,\n      680,\n      155,\n      13,\n      1891,\n      399106\n    ],\n    \"TvShows\": [\n      121361,\n      74205,\n      81189,\n      79126,\n      79349,\n      275274\n    ]\n  }\n</code></pre> <p>The numbers are TheMovieDbId's for Movies and TvDbId's for Tv Shows. You are able to add/remove the Id's for the sections to change the background images. If you do not want any TV shows or Movies then leave that section as an empty array e.g.  </p> <pre><code>\"LandingPageBackground\": {\n    \"Movies\": [\n      278,\n      244786,\n      680,\n      155,\n      13,\n      1891,\n      399106\n    ],\n    \"TvShows\": []\n  }\n</code></pre> <p>The above will only show movie backgrounds.</p>"},{"location":"settings/discord/","title":"Discord","text":"<p>See Discord</p>"},{"location":"settings/dognzb/","title":"DogNZB Settings","text":"<p>Here we can configure Ombi to use watchlists from DogNzb. Yes, we know this is in the Nav twice. It's in two places in the settings - note that the Nav matches the order pages appear in the settings. </p>"},{"location":"settings/dognzb/#enabled","title":"Enabled","text":"<p>Turn on to activate use of DogNzb.</p>"},{"location":"settings/dognzb/#api-key","title":"Api Key","text":"<p>Enter the API key from your DogNzb account.</p>"},{"location":"settings/dognzb/#movies","title":"Movies","text":"<p>If enabled then any movie requests will be added to your Movie Watchlist on DogNzb.</p>"},{"location":"settings/dognzb/#tv-shows","title":"Tv Shows","text":"<p>If enabled then any TV requests will be added to your Watchlist on DogNzb. Please note that DogNzb does not support episode requests, any sort of TV request will just be added to the Watchlist and that is all.</p>"},{"location":"settings/email/","title":"Email","text":"<p>See Email</p>"},{"location":"settings/emby/","title":"Emby","text":"<p>This page is a WORK IN PROGRESS. It is likely to contain errors, as the process has changed slightly since it was last updated.</p>"},{"location":"settings/emby/#enable","title":"Enable","text":"<p>Do you want Ombi to communicate with your Emby Server?</p>"},{"location":"settings/emby/#add-server","title":"Add Server","text":"<p>This is your first step. Press this to get presented with a list of fields you need to fill in for your Ombi and Emby instances to start talking to each other.</p>"},{"location":"settings/emby/#fields","title":"Fields","text":"<p>These are the details you'll need to fill in for Ombi and Emby to talk to each other.</p> Field Required data Server Name This is for you to put the name of your Emby server in.It's used in notifications to say \"your requested contented is now available on ServerName\". Hostname / IP This is the IP address of your Emby instance. If you have it running in a container, it's usually the IP of the machine hosting the container. Either way, this should be the IP you can enter in a browser to be able to open the Emby UI (when combined with the port). Server ID This one will auto-fill once you actually connect properly. Port This is the port you use for Emby access. The default for this is 8096, so if you haven't changed it try that.Note that a container can pass through a different port - if you access the web interface through a different port, use that. SSL If you have enabled SSL in Emby, then turn this on.If SSL is handled by a reverse proxy, leave it off. API Key You will need to generate an API key in Emby in order for Ombi to authenticate with it. This is done in Emby itself.Emby Admin Dashboard -&gt; API Keys (under Advanced) -&gt; + Base URL This is needed if your Emby is configured with a BaseURL (i.e. is accessed by http://ip:port/Emby/ or similar).If you have not configured a BaseURL, leave this blank. Externally Facing Hostname This is the address you use to access Emby outside your network.If you have a reverse proxy in place, this could be something like <code>https://Emby.example.com</code>"},{"location":"settings/emby/#load-libraries","title":"Load Libraries","text":"<p>Once you've filled in all the fields, press \"Load Libraries\" to query the server for available libraries. This will allow you to tell Ombi which libraries to monitor for when requested content becomes available. If no libraries are selected, Ombi will monitor all of them.</p>"},{"location":"settings/emby/#test-connectivity","title":"Test Connectivity","text":"<p>This is a useful one if you are having issues getting things running. It will tell you if it is successful in connecting.</p>"},{"location":"settings/emby/#discover-server-information","title":"Discover Server Information","text":"<p>This will pull the Server ID from Emby to ensure that sync stays reliable (in case of multiple servers).  </p>"},{"location":"settings/emby/#submit","title":"Submit","text":"<p>This saves the server information. DO NOT FORGET THIS PART.</p>"},{"location":"settings/emby/#manually-run-cacher","title":"Manually Run Cacher","text":"<p>This will force Ombi to ask Emby what media it has, to allow Ombi to say whether something is available before it gets requested.</p>"},{"location":"settings/emby/#clear-data-and-resync","title":"Clear Data And Resync","text":"<p>This will clear all the information about media in Emby from Ombi. If you've deleted media, it's recommended to run this in order to ensure that people can search for it without it showing up as still available.</p>"},{"location":"settings/failedrequests/","title":"Failed Requests","text":"<p>Any requests that fail to be pushed to your download manager (*arr, sickrage, etc) end up here. It'll tell you what the request is, what type of content it is, how many times it's retried it, and why it failed. It will also allow you to remove it the request if you decide you'd rather just ignore it.</p>"},{"location":"settings/features/","title":"Features","text":""},{"location":"settings/features/#movie4krequests","title":"Movie4KRequests","text":"<p>This toggle enables the option of adding a second instance of Radarr to your config. This is intended for people downloading in multiple resolutions (SD/HD &amp; 4K), but can be adapted to suit your requirements.  </p>"},{"location":"settings/features/#playedsync","title":"PlayedSync","text":"<p>This is currently an Emby Only feature. It allows Ombi to identify whether content requested by a user has actually been played/watched by that user.  </p>"},{"location":"settings/features/#oldtrendingsource","title":"OldTrendingSource\udb40\udc7f\udb40\udc7f","text":"<p> Removed in v4.43.2 </p> <p>Have Ombi use the old data source for trending content.  </p>"},{"location":"settings/gotify/","title":"Gotify","text":"<p>See Gotify</p>"},{"location":"settings/issues/","title":"Issue Settings","text":"<p>This function is used to allow users to report issues with specific items in your libraries.  </p>"},{"location":"settings/issues/#enable","title":"Enable","text":"<p>Allow users to see the Report Issue button.  </p>"},{"location":"settings/issues/#enable-in-progress-state","title":"Enable in progress state","text":"<p>This allows you to mark issues as 'in progress' so users know you're looking into it.</p>"},{"location":"settings/issues/#delete-issues-after-they-have-been-resolved","title":"Delete issues after they have been resolved","text":"<p>Exactly what it says. Deletes an issue 'x' days after you've marked it as resolved. Define the number of days in the box below the switch.</p>"},{"location":"settings/issues/#categories","title":"Categories","text":"<p>Be sure to add Categories. These are shown as a drop down when users select the Report Issue button. We suggest things like:  </p> <ul> <li>Low Quality</li> <li>Hardcoded subtitles</li> <li>Missing foreign subtitles</li> <li>Wrong language</li> <li>Incomplete video</li> <li>Incorrect movie</li> </ul>"},{"location":"settings/jellyfin/","title":"Jellyfin","text":""},{"location":"settings/jellyfin/#enable","title":"Enable","text":"<p>Do you want Ombi to communicate with your JellyFin Server?</p>"},{"location":"settings/jellyfin/#add-server","title":"Add Server","text":"<p>This is your first step. Press this to get presented with a list of fields you need to fill in for your Ombi and JellyFin instances to start talking to each other.</p>"},{"location":"settings/jellyfin/#fields","title":"Fields","text":"<p>These are the details you'll need to fill in for Ombi and JellyFin to talk to each other.</p> Field Required data Server Name This is for you to put the name of your JellyFin server in.It's used in notifications to say \"your requested contented is now available on ServerName\". Hostname / IP This is the IP address of your JellyFin instance. If you have it running in a container, it's usually the IP of the machine hosting the container. Either way, this should be the IP you can enter in a browser to be able to open the JellyFin UI (when combined with the port). Server ID This one will auto-fill once you actually connect properly. Port This is the port you use for JellyFin access. The default for this is 8096, so if you haven't changed it try that.Note that a container can pass through a different port - if you access the web interface through a different port, use that. SSL If you have enabled SSL in JellyFin, then turn this on.If SSL is handled by a reverse proxy, leave it off. API Key You will need to generate an API key in JellyFin in order for Ombi to authenticate with it. This is done in JellyFin itself.JellyFin Admin Dashboard -&gt; API Keys (under Advanced) -&gt; + Base URL This is needed if your JellyFin is configured with a BaseURL (i.e. is accessed by http://ip:port/jellyfin/ or similar).If you have not configured a BaseURL, leave this blank. Externally Facing Hostname This is the address you use to access JellyFin outside your network.If you have a reverse proxy in place, this could be something like <code>https://jellyfin.example.com</code>"},{"location":"settings/jellyfin/#load-libraries","title":"Load Libraries","text":"<p>Once you've filled in all the fields, press \"Load Libraries\" to query the server for available libraries. This will allow you to tell Ombi which libraries to monitor for when requested content becomes available. If no libraries are selected, Ombi will monitor all of them.</p>"},{"location":"settings/jellyfin/#test-connectivity","title":"Test Connectivity","text":"<p>This is a useful one if you are having issues getting things running. It will tell you if it is successful in connecting.</p>"},{"location":"settings/jellyfin/#discover-server-information","title":"Discover Server Information","text":"<p>This will pull the Server ID from JellyFin to ensure that sync stays reliable (in case of multiple servers).  </p>"},{"location":"settings/jellyfin/#submit","title":"Submit","text":"<p>This saves the server information. DO NOT FORGET THIS PART.</p>"},{"location":"settings/jellyfin/#manually-run-cacher","title":"Manually Run Cacher","text":"<p>This will force Ombi to ask JellyFin what media it has, to allow Ombi to say whether something is available before it gets requested.</p>"},{"location":"settings/jellyfin/#clear-data-and-resync","title":"Clear Data And Resync","text":"<p>This will clear all the information about media in JellyFin from Ombi. If you've deleted media, it's recommended to run this in order to ensure that people can search for it without it showing up as still available.</p>"},{"location":"settings/jobs/","title":"Scheduled Tasks","text":"<p>Everything Ombi does runs as a scheduled task. All of these tasks are on timers using Quartz CRON expressions. Cronmaker should be able to assist you in creating the expression or translate the current ones.  </p>"},{"location":"settings/jobs/#job-descriptions","title":"Job Descriptions","text":"Jobs Default Expression CRON Definition Description Sonarr Sync <code>0 10 0/1 1/1 * ? *</code> Every hour on the 10<sup>th</sup> minute Pulls in all of the monitored episodes, seasons and series into Ombi, so Ombi can have a quick lookup SickRage Sync <code>0 35 0/1 1/1 * ? *</code> Every hour on the 35<sup>th</sup> minute Pulls in all of the monitored episodes, seasons and series into Ombi, so Ombi can have a quick lookup Radarr Sync <code>0 15 0/1 1/1 * ? *</code> Every hour on the 15<sup>th</sup> minute Pulls in all of the monitored Movies into Ombi, so Ombi can have a quick lookup Lidarr Sync <code>0 40 0/1 1/1 * ? *</code> Every hour on the 40<sup>th</sup> minute Pulls in all of the monitored Albums and Artists into Ombi, so Ombi can have a quick lookup CouchPotato Sync <code>0 30 0/1 1/1 * ? *</code> Every hour on the 30<sup>th</sup> minute Pulls in all of the monitored Movies into Ombi, so Ombi can have a quick lookup Automatic Update <code>0 0 0/6 1/1 * ? *</code> Every 6 hours Automatically updates Retry Failed Requests <code>0 0 6 1/1 * ? *</code> Every 1 day at 06:00 Retries any requests that failed to send to the DVR application Plex Sync <code>0 0 2 1/1 * ? *</code> Every 1 day at 02:00 Goes through Plex and updates the local index of what Plex has Plex Recently Added Sync <code>0 0/30 * 1/1 * ? *</code> Every 30 minutes Goes through the recently added items in Plex and Ombi keeps a local copy of what Plex has Emby Sync <code>0 5 0/1 1/1 * ? *</code> Every hour on the 5<sup>th</sup> minute Goes through Emby and Ombi keeps a local copy of what Emby has User Importer <code>0 0 0 1/1 * ? *</code> Every 1 day at 00:00 Imports the users from Plex/Emby so they can log into Ombi Refresh Metadata <code>0 0 12 1/3 * ? *</code> Every 3 days at 12:00 Tries to find any missing metadata we might have for our cached data e.g. ImdbId Newsletter <code>0 0 12 ? * 6 *</code> Every 7 days at 12:00 Sends out the newsletter if enabled Issue Purge/Delete <code>0 0 0 1/1 * ? *</code> Every 1 day at 00:00 Deleted issues after the specified time setup in the Issue settings Media Data Refresh <code>0 0 12 1/5 * ? *</code> Every 5 days at 12:00 Deletes all the content we have previously cached with Plex/Emby and then re-caches that data"},{"location":"settings/landingpage/","title":"Landing Page","text":"<p>You can have a landing page appear before users get to the login page. This is useful if you wish to have messages or disclaimers displayed before they make requests.</p>"},{"location":"settings/landingpage/#enable","title":"Enable","text":"<p>Check this if you want the landing page to be enabled before the login page</p>"},{"location":"settings/landingpage/#notice-message","title":"Notice Message","text":"<p>This is an optional message you can put on the landing page. It supports full HTML formatting (italics, bold, strikethrough, linking, etc). You do not need to declare the doctype in this field, as it is rendered into the Ombi UI directly (which already declares it).</p>"},{"location":"settings/lidarr/","title":"Lidarr","text":"<p>This falls under the category of All the Arrs. </p>"},{"location":"settings/logs/","title":"Logs","text":""},{"location":"settings/logs/#coming-soon","title":"Coming Soon","text":""},{"location":"settings/massemail/","title":"Mass Email","text":"<p>See Mass Email</p>"},{"location":"settings/mattermost/","title":"Mattermost","text":"<p>See Mattermost</p>"},{"location":"settings/mobile/","title":"Mobile (Legacy)","text":"<p>See Mobile</p>"},{"location":"settings/newsletter/","title":"Newsletter","text":"<p>See Newsletter</p>"},{"location":"settings/notifications/","title":"Notification Types","text":"<p>There are several different methods Ombi can use to notify users about the status of their requests (approved, denied, available...). If you enable a notification type at the server level, it will be used to notify any user that has a value under that notification type in their user details. Note that this will run for every type they have enabled - so if they have Discord, Pushbullet, and WhatsApp, then Ombi will attempt to use all of the methods active. They will be told via all of the methods they have details for. This will duplicate notifications. You have been warned.</p> <p>Available methods include:</p> <ul> <li>Mobile</li> <li>Legacy Mobile</li> <li>Email</li> <li>MassEmail</li> <li>Newsletter</li> <li>Discord</li> <li>Slack</li> <li>Pushbullet</li> <li>Pushover</li> <li>Mattermost</li> <li>Telegram</li> <li>Gotify</li> <li>Twilio</li> <li>Webhook</li> </ul>"},{"location":"settings/ombi/","title":"Generic Settings","text":"<p>This page contains some of the basic settings to configure Ombi. It is a stub, and only holds settings that aren't big enough for their own full pages.  </p>"},{"location":"settings/ombi/#base-url","title":"Base URL","text":"<p>This is for Reverse Proxy setups. Put the base url you want in e.g. if the <code>/location</code> block is like the following (Nginx) <code>/location ombi</code> then put in <code>/ombi</code> as a Base Url. If you are running Ombi on startup (so it launches when the system boots up), see startup parameters for how to set the <code>--baseurl</code> startup parameter on your method.  </p>"},{"location":"settings/ombi/#api-key","title":"Api Key","text":"<p>This is to use the API that Ombi provides. See here</p>"},{"location":"settings/ombi/#branch","title":"Branch","text":"<p>This controls whether Ombi checks for Stable or Develop releases in the update checker. This does not auto update Ombi - it is only for notifications.</p>"},{"location":"settings/ombi/#do-not-send-notifications-if-a-user-has-the-auto-approve-permission","title":"Do not send Notifications if a User has the Auto Approve permission","text":"<p>This will not send the admin any \"New Request\" notifications if the user making them has auto approve.</p>"},{"location":"settings/ombi/#hide-requests-from-other-users","title":"Hide requests from other users","text":"<p>This will not show any existing requests to any \"normal\" user (non-admin or power user).</p>"},{"location":"settings/ombi/#auto-delete-available-requests","title":"Auto Delete Available Requests","text":"<p>This will auto delete requests which have been marked available for 'x' days. If it's set to <code>1</code> then it will delete available requests after they have been available in the system for a day.  </p>"},{"location":"settings/ombi/#allow-us-to-collect-anonymous-analytical-data","title":"Allow us to collect anonymous analytical data","text":"<p>This one is pretty simple - allows Ombi to give us stats regarding what browsers are being used to access it most, what platform it is deployed on etc. This helps us to target dev time - better support on the most used platforms makes sense.  </p>"},{"location":"settings/ombi/#language","title":"Language","text":"<p>Self-explanatory - what language do you want as default for your instance of Ombi? This can be overridden per-user in their preferences, should they wish to view Ombi in their own language.  </p>"},{"location":"settings/plex/","title":"Plex","text":""},{"location":"settings/plex/#this-page-is-a-work-in-progress","title":"This page is a Work-In-Progress","text":""},{"location":"settings/plex/#enable","title":"Enable","text":"<p>Do you want Ombi to communicate with your Plex Server?</p>"},{"location":"settings/plex/#enable-user-watchlist-requests","title":"Enable User Watchlist Requests","text":"<p>This will enable Ombi to import requests from users watchlists. If a user is using a Plex account in Ombi, when they add something (either a Movie or a TV Show) to their watchlist, it will appear in Ombi just like they requested it. For this feature to work, the user needs to make sure they have logged out of and back into Ombi after version <code>v4.16.x</code>.</p> <p>If the user has Request Limits, auto approve etc, all of that will be taken into account - just like the user is requesting it via the Ombi UI.</p>"},{"location":"settings/plex/#watchlist-request-whole-show","title":"Watchlist - Request Whole Show","text":"<p>If this is enabled, then Ombi will request the whole show for any show that a user adds to their Plex watchlist. If not enabled, it will only request the latest season.  </p>"},{"location":"settings/plex/#watchlist-user-errors","title":"Watchlist User Errors","text":"<p>This shows the status of watchlist sync for your users.</p>"},{"location":"settings/plex/#servers","title":"Servers","text":"<p>This will show any server(s) you have Ombi configured to talk to, as well as allow you to manually add a server.  </p>"},{"location":"settings/plex/#plex-credentials","title":"Plex Credentials","text":"<p>These fields are optional to automatically fill in your Plex server settings. This will pass your username and password to the Plex.tv API to grab the servers associated with this user.  </p>"},{"location":"settings/plex/#username","title":"Username","text":"<p>The username for your account with plex.tv</p>"},{"location":"settings/plex/#password","title":"Password","text":"<p>The password for your account with plex.tv If you have 2FA enabled on your account, you need to append the 2FA code to the end of your password.</p>"},{"location":"settings/plex/#load-servers","title":"Load Servers","text":"<p>This triggers the actual query to the Plex.tv API. Once it succeeds, it will fill your servers into the list to be selected from. Select your server from the list, edit any details as required/applicable, select the libraries you want Ombi to watch for content, the save the entry.  </p>"},{"location":"settings/plex/#manually-add-server","title":"Manually Add Server","text":"<p>NB: Coming Soon</p>"},{"location":"settings/plex/#full-sync","title":"Full Sync","text":"<p>This will trigger a full sync of content from the libraries configured to be watched by Ombi in your configured Plex Server(s).  </p>"},{"location":"settings/plex/#partial-sync","title":"Partial Sync","text":"<p>This will trigger a partial sync of content from the libraries configured to be watched by Ombi in your configured Plex Server(s).  </p>"},{"location":"settings/plex/#clear-data-and-resync","title":"Clear Data and Resync","text":"<p>This will clear all content from the OmbiExternal database and run a full sync. This is useful if you've removed content recently, or if a corrupt entry occurs.  </p>"},{"location":"settings/plex/#run-watchlist-import","title":"Run Watchlist Import","text":"<p>This will trigger an import of the watchlist for all your Plex users.  </p>"},{"location":"settings/pushbullet/","title":"Pushbullet","text":"<p>See Pushbullet</p>"},{"location":"settings/pushover/","title":"Pushover","text":"<p>See Pushover</p>"},{"location":"settings/radarr/","title":"Radarr","text":"<p>This falls under the category of All the Arrs. </p>"},{"location":"settings/sickrage/","title":"SickRage","text":""},{"location":"settings/sickrage/#coming-soon","title":"Coming Soon","text":""},{"location":"settings/slack/","title":"Slack","text":"<p>See Slack</p>"},{"location":"settings/sonarr/","title":"Sonarr","text":"<p>This falls under the category of All the Arrs. </p>"},{"location":"settings/telegram/","title":"Telegram","text":"<p>See Telegram</p>"},{"location":"settings/themoviedb/","title":"The Movie DB","text":""},{"location":"settings/themoviedb/#show-adult-movies","title":"Show Adult Movies","text":"<p>Turn this on to allow Ombi to include movies flagged as 'adult' in search results.  </p>"},{"location":"settings/themoviedb/#original-languages","title":"Original Languages","text":"<p>This filters what language films Ombi will show in results (i.e. if you set English, it will not show French movies).  </p>"},{"location":"settings/themoviedb/#excluded-keyword-ids","title":"Excluded Keyword IDs","text":"<p>Prevent movies with certain keywords from being suggested. Enter these keywords in and select them from the dialog that will pop up as you type.</p> <p>Click the \"X\" next to a keyword to remove it from the blocklist.</p>"},{"location":"settings/themoviedb/#movie-genres","title":"Movie Genres","text":"<p>What movie genre(s) is Ombi allowed to show? Note, this is a filter. If you select an entry here, Ombi will only show what is selected. Select everything you want included.</p>"},{"location":"settings/themoviedb/#tv-genres","title":"TV Genres","text":"<p>What TV Show genre(s) is Ombi allowed to show? Note, this is a filter. If you select an entry here, Ombi will only show what is selected. Select everything you want included.</p>"},{"location":"settings/twilio/","title":"Twilio","text":"<p>See Twilio</p>"},{"location":"settings/update/","title":"Update","text":"<p>See Updating</p>"},{"location":"settings/user-preferences/","title":"User Preferences","text":"<p>This is where an individual user can set their langauge, and find the QR code for signing in to the app.  </p> <p>Per-user settings like roles can be applied by the admin under User Management.  </p>"},{"location":"settings/user-preferences/#language","title":"Language","text":"<p>This defines what language the Ombi interface will display in for the user.  </p>"},{"location":"settings/user-preferences/#streaming-country","title":"Streaming Country","text":"<p>Where is the user based? This is the country code that Ombi will display streaming information for. If you are in the US please select US and you will get US related streaming information.  </p>"},{"location":"settings/usermanagement/","title":"Importing Users","text":"<p>This page is slightly dynamic depending on what Media Server you have enabled. Per-user settings can be applied under User Management.  </p>"},{"location":"settings/usermanagement/#import-plex-users","title":"Import Plex Users","text":"<p>Only Plex users you have shared your library with can be imported. Managed user accounts are tied to your admin account and cannot be imported separately.</p> <p>This will run a scheduled job every day that will import Plex users and give them the default permissions you have setup. It will also look at the existing users that have been imported and update their email if it has changed.</p>"},{"location":"settings/usermanagement/#import-plex-admin","title":"Import Plex Admin","text":"<p>This will allow the scheduled job to also import your user from Plex (as an admin). This will allow you to use Plex SSO as the admin as well.</p>"},{"location":"settings/usermanagement/#cleanup-plex-users","title":"Cleanup Plex Users","text":"<p>This will allow the scheduled job to remove old Plex users from your Ombi instance. This will prevent anyone who no longer has access to your Plex from requesting content.  </p>"},{"location":"settings/usermanagement/#plex-users-excluded-from-import","title":"Plex Users excluded from import","text":"<p>This is an autocomplete field where you can type in the users username and select users that you DO NOT want to be imported if the above option is enabled.</p>"},{"location":"settings/usermanagement/#default-roles","title":"Default Roles","text":"<p>Choose the default roles that the imported users will take when the import job runs. You can view what the different roles mean here</p>"},{"location":"settings/usermanagement/#default-request-limit","title":"Default Request Limit","text":"<p>Note - this option behaves differently as of <code>v4.0.1499</code>. </p> <p>These are the default request limits for the users, based on the behaviour in the version in use. If the user reaches their request limit they will no longer be able to request. If you do not want your user to have a request limit, set it to 0.</p> <p>NOTE: For TV Shows, 1 episode counts as 1 request</p> New BehaviourVersions older than 4.0.1499 <p>Request limits reset at the start of the day/week/month depending on the setting of that user. This is set per user and request type (so for each user you can have a different setting for music/movies/TV shows if you want). Coming soon:</p> <ul> <li>Applying the setting via bulk edit in user management.</li> <li>Setting a default for importing as.</li> </ul> <p>Older versions of Ombi employed a 'rolling' 7 day count. This is still the default for existing installs, for backwards compatibility. New installs will use the new behaviour by default. When we state a rolling 7 days, this is how it works:</p> <ul> <li>Request Limit is set to 10</li> <li>Day 1 - Request 3 things</li> <li>Day 6 - Request 7 things</li> <li>Day 7 - Cannot Request</li> <li>Day 8 - We can now request 3 more times</li> </ul>"},{"location":"settings/usermanagement/#streaming-country","title":"Streaming Country","text":"<p>Defines what the default country imported users will be set as.  </p>"},{"location":"settings/usermanagement/#run-importer-button","title":"Run Importer button","text":"<p>Clicking this button will run the Emby/Plex user import jobs on-demand.</p>"},{"location":"settings/vote/","title":"Vote","text":""},{"location":"settings/vote/#enable","title":"Enable","text":"<p>Switch on for user requests to auto-approve once enough users vote that they also want that item.</p>"},{"location":"settings/vote/#vote-limits","title":"Vote Limits","text":"<p>Vote limits tell Ombi how many votes the request needs before approval. e.g. If the Movie vote limit is 10, it requires 10 Upvotes from 10 different users before it will be approved.</p> <p>If you set your vote limit to 1 then things will be auto approved! When a user requests content they are automatically vote number 1.</p>"},{"location":"settings/vote/#other","title":"Other","text":"<p>If a user upvotes a request, that user will also automatically be subscribed to that request. This means they will also be notified when the request becomes available.</p>"},{"location":"settings/webhook/","title":"Webhook","text":"<p>See Webhook</p>"},{"location":"settings/notifications/cloudmobile/","title":"Mobile Notifications","text":"<p>This page lets you control notifications for app users.</p>"},{"location":"settings/notifications/cloudmobile/#manual-notification","title":"Manual Notification","text":"<p>Anyone who uses the Ombi app and is logged in to your instance of Ombi will appear in the list of users on this page. Toggle the switch next to the ones you wish to send a notification to, enter the message, and push \"Send Notification\" to send a custom message to them via the Ombi app.</p>"},{"location":"settings/notifications/cloudmobile/#messages","title":"Messages","text":"<p>Down the right-hand side of the page you'll find a list of the different notification types. Expanding each one will allow you to customise the message for each type.</p> <p>You can include notification variables in these messages for Ombi to auto-fill with.  </p> <p>Be sure to hit \"Submit\" after you edit the messages for the changes to be saved.</p>"},{"location":"settings/notifications/discord/","title":"Discord Notifications","text":"<p>Ombi can be set up to send notifications to a Discord server for request states.</p>"},{"location":"settings/notifications/discord/#configuring-access-to-the-channel","title":"Configuring access to the channel","text":"<p>You must have a webhook set up for your chosen discord server or channel. You can find an official guide for this here.</p>"},{"location":"settings/notifications/discord/#enabling-mentions","title":"Enabling Mentions","text":"<ol> <li>Set the user's 'Notification Preferences' to the person's discord user ID. This can be found by right clicking their name in Discord and selecting \"Copy ID\". (Only visible while in Developer Mode - this can be enabled under \"Settings &gt; Advanced\".) </li> <li>Add <code>&lt;@{UserPreference}&gt;</code> where you want to mention in your notification template. Refer to the Notification Template Variables for information on formatting your notifications.</li> </ol> <p>Extra tips: You can set a channel so nobody can post, and the webhook can still post. You can @ people by using: <code>&lt;@{Alias}&gt;!</code>. Be sure their Discord alias is known in the user profile of Ombi under Alias.  </p>"},{"location":"settings/notifications/email/","title":"Email Notifications","text":""},{"location":"settings/notifications/email/#setting-up-email-notifications","title":"Setting up email notifications","text":"<ol> <li>Go to Email Notifications in the Ombi menu, and make sure \"Enabled\" is checked. If your mail provider requires authentication, ensure that \"Enable SMTP authentication\" is also checked. If you want to activate user email notifications as well, make sure that is checked.  </li> <li>In the SMTP Host name or IP field, enter the address of your SMTP server.  </li> <li>In the SMTP port field enter the port your server uses.  </li> <li>In the Email sender field enter the email address you wish the notifications to come from. Generally, this is your own email address. If you have a service such as Office 365 or Gmail then adding an an alias to your account will allow you to use a different address to your actual one.  </li> <li>Set email recipient to any email you want to test against.  </li> <li>Fill in your full email address and password in the username and password field.  </li> </ol> <p>Submit these settings, and then can run a test. This will confirm whether or not everything is working.</p>"},{"location":"settings/notifications/email/#common-mail-settings","title":"Common Mail Settings","text":"GmailOffice 365Yahoo <p>SMTP Server: <code>smtp.gmail.com</code> Port: <code>587</code></p> <p>Note: you will need to activate Two Factor Authentication and configure an app password for this option. </p> <p>SMTP Server: <code>smtp.office365.com</code> Port: <code>587</code> </p> <p>SMTP Server: <code>smtp.mail.yahoo.com</code> Port: <code>587</code> </p>"},{"location":"settings/notifications/email/#common-mail-issues","title":"Common Mail Issues","text":""},{"location":"settings/notifications/email/#two-factor-authentication","title":"Two Factor Authentication","text":"<p>To send email via Gmail with a direct SMTP connection, you will need to add an \"App Password\" to your account. This is only possible if you have 2 factor authentication turned ON with your Gmail account. More information can be found here</p>"},{"location":"settings/notifications/email/#app-password","title":"App Password","text":"<p>Once you have generated an app password for your Gmail account, this should be used in the \"password\" field instead of your usual password.</p>"},{"location":"settings/notifications/email/#email-failing-even-with-correct-smtp-settings","title":"Email failing even with correct SMTP settings","text":"<p>A common cause of the system failing to generate emails is a missing entry under Settings -&gt; Customisation &gt; Application URL. This generally results in Ombi logging an error saying:  </p> <pre><code>[Warning] Exception when testing Email Notifications\nSystem.InvalidOperationException: This operation is not supported for a relative URI.\n</code></pre>"},{"location":"settings/notifications/gotify/","title":"Gotify","text":""},{"location":"settings/notifications/gotify/#coming-soon","title":"Coming Soon","text":""},{"location":"settings/notifications/massemail/","title":"Mass Email","text":"<p>This lets you send out a mass email notification to your users. You can select all or specific users.  </p> <p>To see what details Ombi will automatically 'adjust' in an email, see template variables</p>"},{"location":"settings/notifications/mattermost/","title":"Mattermost","text":""},{"location":"settings/notifications/mattermost/#coming-soon","title":"Coming Soon","text":""},{"location":"settings/notifications/mobile/","title":"Legacy Mobile Notifications","text":"<p>This page lets you control notifications for users of the old app. It is intended to be deprecated in a future release.  </p>"},{"location":"settings/notifications/mobile/#notification-tests","title":"Notification Tests","text":"<p>Anyone who uses the old Ombi app and is logged in to your instance of Ombi will appear in the list of users on this page. Select the ones you wish to test notifications for and push \"Send Test Notification\" to send a test notification to them via the Ombi app.</p>"},{"location":"settings/notifications/mobile/#removing-legacy-users","title":"Removing Legacy Users","text":"<p>Anyone who uses the old Ombi app and is logged in to your instance of Ombi will appear in the list of users on this page. Select the ones you wish to remove and push \"Remove User\" to disconnect their app session.</p>"},{"location":"settings/notifications/mobile/#messages","title":"Messages","text":"<p>Down the bottom of the page you'll find a list of the different notification types. Expanding each one will allow you to customise the message for each type.</p> <p>You can include notification variables in these messages for Ombi to auto-fill with.  </p> <p>Be sure to hit \"Submit\" after you edit the messages for the changes to be saved.</p>"},{"location":"settings/notifications/newsletter/","title":"Newsletters","text":"<p>The newsletter will send out an email to each user with the <code>Receives Newsletter</code> role with a list of the movies and tv shows/episodes that have been added recently. The newsletter will never show duplicates, so once it's been sent out then it will only show new content in the next email. By default this is scheduled to run every Friday at 12GMT.</p> Adding a link to your Ombi instance in your newsletter <p>For the newsletter to work correctly, ensure you have filled out the Application URL This will allow the logo at the top of the newsletter to be a link back to your Ombi instance.</p> <p>Please be sure you Update Database before enabling newsletters.</p>"},{"location":"settings/notifications/newsletter/#enable","title":"Enable","text":"<p>Exactly what it says. Enable this for the newsletter task to be scheduled.</p>"},{"location":"settings/notifications/newsletter/#disable-tv","title":"Disable TV","text":"<p>Enable this to exclude TV shows from the newsletter.</p>"},{"location":"settings/notifications/newsletter/#disable-movies","title":"Disable Movies","text":"<p>Enable this to exclude movies from the newsletter.</p>"},{"location":"settings/notifications/newsletter/#disable-music","title":"Disable Music","text":"<p>Enable this to exclude music from the newsletter.</p>"},{"location":"settings/notifications/newsletter/#subject","title":"Subject","text":"<p>Set the subject you'd like your newsletter email to use.</p>"},{"location":"settings/notifications/newsletter/#message","title":"Message","text":"<p>The message that will go above the new content in the email body.</p>"},{"location":"settings/notifications/newsletter/#submit","title":"Submit","text":"<p>Save the settings as they appear.</p>"},{"location":"settings/notifications/newsletter/#test","title":"Test","text":"<p>When testing the newsletter, Ombi will grab the latest 10 movies and 10 shows that Ombi has found and send it to all users with the Admin permission. If the users with the Admin permission do not have email addresses associated with their account then they will (of course) not receive an email.</p>"},{"location":"settings/notifications/newsletter/#update-database","title":"Update Database","text":"<p>This is very important. If you do not update the database then the first run of the newsletter will go through EVERY movie and show/episodes in your Plex/Emby library and compose an email. This can be very time consuming if you have large libraries. We strongly recommend updating the database before enabling the newsletter.</p>"},{"location":"settings/notifications/newsletter/#trigger-now","title":"Trigger now","text":"<p>This will force the system to generate and send a newsletter outside of the regular schedule.</p>"},{"location":"settings/notifications/pushbullet/","title":"Pushbullet Notifications","text":"<p>This will allow you to set up the Pushbullet channel used to send notifications. On this page you can customize the text of Pushbullet notifications.</p>"},{"location":"settings/notifications/pushbullet/#setup","title":"Setup","text":"<p>After navigating to the Pushbullet site, click Create Access Token, then copy and paste the generated key into Ombi. This can be found in your Pushbullet Account Settings.</p>"},{"location":"settings/notifications/pushover/","title":"Pushover","text":"<p>For configuring notifications to be sent via Pushover.</p>"},{"location":"settings/notifications/pushover/#enabled","title":"Enabled","text":"<p>Turns this notification type on or off at a system level.  </p>"},{"location":"settings/notifications/pushover/#access-token","title":"Access Token","text":"<p>This is a Pushover API token, and can be created on their build page. Find it here.</p>"},{"location":"settings/notifications/pushover/#user-token","title":"User Token","text":"<p>When you sign up to Pushover you'll get a User Key e-mailed to you, but you can always find it either on your dashboard or through the Settings menu of the Pushover client app on your device. The User Key is a randomly generated identifier which allows other apps to send Pushover notifications to your devices.</p>"},{"location":"settings/notifications/pushover/#priority","title":"Priority","text":"<p>Lets you define how high a priority to assign to Ombi notifications in Pushover. Note, setting this to high may override some silencing profiles, so be careful here.  </p>"},{"location":"settings/notifications/pushover/#sound","title":"Sound","text":"<p>This lets you set a custom notification tone to use for notifications from Ombi.</p>"},{"location":"settings/notifications/pushover/#screenshot","title":"Screenshot","text":""},{"location":"settings/notifications/slack/","title":"Slack Notifications","text":"<p>Here is where you can configure Ombi to send notifications to a Slack server.  </p>"},{"location":"settings/notifications/slack/#coming-soon","title":"Coming Soon","text":""},{"location":"settings/notifications/slack/#enabled","title":"Enabled","text":"<p>Turns this notification type on or off at a system level.  </p>"},{"location":"settings/notifications/slack/#webhook-url","title":"Webhook Url","text":"<p>You'll need to configure a webhook in your particular Slack instance. Find this here. Once you have this webhook address, enter it into the Webhook Url field and press Submit to save it. This is where Ombi will submit the notification details</p>"},{"location":"settings/notifications/slack/#username-override","title":"Username Override","text":"<p>More info coming soon.</p>"},{"location":"settings/notifications/slack/#channel-override","title":"Channel Override","text":"<p>More info coming soon.</p>"},{"location":"settings/notifications/slack/#emoji-icon-override","title":"Emoji Icon Override","text":"<p>More info coming soon.</p>"},{"location":"settings/notifications/slack/#url-icon-override","title":"Url Icon Override","text":"<p>More info coming soon.</p>"},{"location":"settings/notifications/slack/#screenshot","title":"Screenshot","text":""},{"location":"settings/notifications/telegram/","title":"Telegram Notifications","text":""},{"location":"settings/notifications/telegram/#bot-needed","title":"Bot Needed","text":"<p>You need a bot for Telegram notifications. Visit Telegram and create a bot here.</p>"},{"location":"settings/notifications/telegram/#ombi-settings","title":"Ombi Settings","text":"<p>You also need a Chat ID from Telegram. You can get the Chat ID from here. This also supports Group Chat ID's.</p>"},{"location":"settings/notifications/telegram/#tagging-users","title":"Tagging Users","text":"<p>You can also add UserPreference to Telegram! In the User Management settings, Enter each users Telegram Username into the field. </p> <p>In order for the notification to call a user you must add <code>@{UserPreference}</code> as a Notification Variable into the Notification Settings, as pictured. </p>"},{"location":"settings/notifications/twilio/","title":"Twilio Notifications","text":""},{"location":"settings/notifications/twilio/#setup","title":"Setup","text":"<ol> <li>Ensure you have a Twilio account</li> <li>Login and go to your dashboard</li> <li>Select <code>Programmable SMS</code> from the <code>All Products &amp; Services</code> Menu</li> <li>On the Dashboard menu press <code>Show API Credentials</code></li> <li>Take the <code>Account SID</code> and <code>Auth Token</code> and insert them into the ombi settings</li> <li>The From number field is the Twilio owned number that you need to setup (see Twilio docs for this)</li> </ol>"},{"location":"settings/notifications/webhook/","title":"Webhook","text":""},{"location":"settings/notifications/webhook/#coming-soon","title":"Coming Soon","text":""}]}